
-- Generated by LudusCompiler - Bleeding Edge Edition
local __MODULES = {}
local __MODULE_CACHE = {}

local function __require(module_id)
    if __MODULE_CACHE[module_id] then
        return __MODULE_CACHE[module_id]
    end
    
    local module_loader = __MODULES[module_id]
    if not module_loader then
        error("Module not found: " .. module_id)
    end
    
    local module_exports = module_loader()
    __MODULE_CACHE[module_id] = module_exports
    return module_exports
end

-- Set up global require if it doesn't exist
if not require then
    getgenv().require = __require
end


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_encryption_lua"] = function()
print("[LOAD] src/modules/encryption.lua loaded")
local encryptedResult = {}
local function r1(x, y)
	local z = 0
	local t = 1
	while x > 0 or y > 0 do
		local u = x % 2
		local v = y % 2
		if u ~= v then
			z = z + t
		end
		x = math.floor(x / 2)
		y = math.floor(y / 2)
		t = t * 2
	end
	return z
end
local function s1(x, y)
	local z = 0
	local t = 1
	while x > 0 or y > 0 do
		local u = x % 2
		local v = y % 2
		if u == 1 and v == 1 then
			z = z + t
		end
		x = math.floor(x / 2)
		y = math.floor(y / 2)
		t = t * 2
	end
	return z
end
local function t1(x, y)
	local z = 0
	local t = 1
	while x > 0 or y > 0 do
		local u = x % 2
		local v = y % 2
		if u == 1 or v == 1 then
			z = z + t
		end
		x = math.floor(x / 2)
		y = math.floor(y / 2)
		t = t * 2
	end
	return z
end
local function u1(x, y)
	return bit32.band(x * 2 ^ y, 0xFFFFFFFF)
end
local function v1(x, y)
	return math.floor(x / 2 ^ y)
end
local function w1(x, y)
	return bit32.band(u1(x, y) + v1(x, 32 - y), 0xFFFFFFFF)
end
local function x1(x, y, z)
	return r1(s1(x, y), t1(y, w1(z, 3)))
end
local function y1(a, b)
	local c = {}
	local d = #b
	for e = 1, #a do
		local f = a:sub(e, e):byte()
		local g = b:sub(((e - 1) % d) + 1, ((e - 1) % d) + 1):byte()
		local h = r1(f, g)
		table.insert(c, string.char(h % 256))
	end
	return table.concat(c)
end
local function z1(a, b)
	local c = {}
	local d = #b
	for e = 1, #a do
		local f = a:sub(e, e):byte()
		local g = b:sub(((e - 1) % d) + 1, ((e - 1) % d) + 1):byte()
		local h = x1(f, g, e % 256)
		table.insert(c, string.char(h % 256))
	end
	return table.concat(c)
end
local function a2(b)
	local c = {}
	local d = 0
	for e = 1, #b do
		local f = b:sub(e, e):byte()
		d = (d * 256) + f
		while d >= 64 do
			local g = (d % 64) + 1
			table.insert(c, string.sub("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", g, g))
			d = math.floor(d / 64)
		end
	end
	if d > 0 then
		table.insert(c, string.sub("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", d + 1, d + 1))
	end
	return table.concat(c)
end
local function b2(c)
	local d = 0
	for e = 1, #c do
		d = r1(d, c:sub(e, e):byte())
		d = s1(d, 0xFF)
		d = r1(d, e % 256)
	end
	return tostring(d)
end
local function c2(d, e)
	local f = d
	for _ = 1, e do
		f = y1(f, b2(f))
	end
	return f
end
local function ultimateEncrypt(f, g)
	f = (f or "") .. string.rep("0", 1024 - #(f or ""))
	g = (g or "") .. string.rep("1", 256 - #(g or ""))
	local h = c2(g, 20)
	local i = y1(f, h)
	i = z1(i, b2(h))
	i = z1(i, c2(h, 10))
	local j = a2(i)
	j = a2(j)
	j = a2(j)
	local k = z1(j, "lacag has aura and obfuscates as a key very well")
	local l = a2(k)
	return string.sub(l, 1, 50)
end
local f = obfuscation_ID
local g = script_Key
local encrypted = ultimateEncrypt(f, g)
table.insert(encryptedResult, encrypted)
local HttpService = game:GetService("HttpService")
local function encryptPath(lineTable, passKey)
    local plainText
    if type(lineTable) == "table" then
        plainText = HttpService:JSONEncode(lineTable)
    else
        plainText = tostring(lineTable)
    end
    local keyLen = #passKey
    local encryptedChars = {}
    for i = 1, #plainText do
        local p = plainText:byte(i)
        local k = passKey:byte(((i - 1) % keyLen) + 1)
        local c = (p + k) % 256
        table.insert(encryptedChars, string.char(c))
    end
    local encryptedStr = table.concat(encryptedChars)
    local hexStr = encryptedStr:gsub(".", function(c)
        return string.format("%02X", c:byte())
    end)
    return hexStr
end
local function decryptPath(encryptedHex, passKey)
	local encryptedStr = encryptedHex:gsub("..", function(hex)
		return string.char(tonumber(hex, 16))
	end)
	local keyLen = #passKey
	local decryptedChars = {}
	for i = 1, #encryptedStr do
		local c = encryptedStr:byte(i)
		local k = passKey:byte(((i - 1) % keyLen) + 1)
		local p = (c - k) % 256
		table.insert(decryptedChars, string.char(p))
	end
	local decryptedStr = table.concat(decryptedChars)
	local result = {}
	for line in decryptedStr:gmatch("([^\n]+)\n?") do
		table.insert(result, line)
	end
	return result
end
return {
	legacy = encryptedResult,
	["encrypt:Path"] = encryptPath,
	["decrypt:Path"] = decryptPath,
}

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua"] = function()
print("[LOAD] src/modules/Stats.lua loaded")




local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local Stats = {}
local folderName = "Prog Bot Loaded Accounts"
local Encryption = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_encryption_lua")
local PATH_PASSKEY = "lacag is a stupid sigma." 

local ultraLineage = {
	Abysswalker = { "Warrior", "Greatsword", "Abysswalker" },
	Ronin = { "Warrior", "Samurai", "Ronin" },
	Candence = { "Thief", "Spy", "Candence" },
	DragonSlayer = { "Pitfighter", "DragonKnight", "DragonSlayer" },
	MasterIllusionist = { "Illusionist", "MasterIllusionist" },
	DeepKnight = { "Pitfighter", "ChurchKnight", "DeepKnight" },
	SigilKnightCommander = { "Warrior", "SigilKnight", "SigilKnightCommander" },
	DarkSigilKnight = { "Warrior", "SigilKnight", "DarkSigilKnight" },
	DragonSage = { "Monk", "DragonSage" },
	Oni = { "Akuma", "Oni" },
	Florist = { "Botanist", "Florist" },
	Whisper = { "Thief", "Spy", "Whisper" },
	Faceless = { "Thief", "Assassin", "Faceless" },
	Shinobi = { "Thief", "Assassin", "Shinobi" },
	MasterNecromancer = { "Necromancer", "Master Necromancer" },
	Lapidarist = { "Warrior", "SuperBlacksmith", "Lapidarist" },
	Vanguard = { "Warrior", "Greatsword", "Vanguard" },
}

local classdata = {
	Warrior = { skills = { "Action Surge", "MercenaryCarry", "Pommel Strike" }, type = "Base" },
	SuperBlacksmith = { skills = { "Remote Smithing" }, type = "Super" },
	Vanguard = { skills = { "Brandish", "Blade Crash", "Puncture", "Azure Ignition" }, type = "Ultra" },
	Spearfisher = { skills = { "Harpoon", "Skewer", "Hunter's Focus" }, type = "Super" },
	Candence = { skills = { "Joyous Dance", "Song of Lethargy", "Sweet Soothing" }, type = "Ultra" },
	Greatsword = { skills = { "Shoulder Bash", "GreatswordTraining" }, type = "Super" },
	Abysswalker = { skills = { "AbyssTraining", "Abysswalker", "Abyssal Scream", "Wrathful Leap" }, type = "Ultra" },
	Samurai = { skills = { "Triple Slash", "Blade Flash", "Flowing Counter", "BuyKatana" }, type = "Super" },
	Ronin = { skills = { "Sheathe Mastery", "Calm Mind", "Swallow Reversal", "Samurai" }, type = "Ultra" },
	Pitfighter = { skills = { "SpearDash", "Triple Strike", "Serpent Strike" }, type = "Base" },
	DragonKnight = { skills = { "Spear Crusher", "Dragon Roar", "Dragon Blood" }, type = "Super" },
	DragonSlayer = {
		skills = { "Wing Soar", "Thunder Spear Crash", "Dragon Awakening", "DragonBloodUpgrade" },
		type = "Ultra",
	},
	Illusionist = { skills = { "Observe", "MentalBlock", "Custos", "Claritum" }, type = "Super" },
	MasterIllusionist = {
		skills = { "Globus", "Dominus", "Hystericus", "ObserveBlock", "IllusionMastery" },
		type = "Ultra",
	},
	ChurchKnight = { skills = { "Church Knight Helmet", "Chain Pull", "Light Piercer", "Impale" }, type = "Super" },
	DeepKnight = { skills = { "Chain Pull", "Deep Sacrifice", "Leviathan Plunge", "PrinceBlessing" }, type = "Ultra" },
	SigilKnight = { skills = { "Ice Charge", "Thunder Charge", "Flame Charge" }, type = "Super" },
	DarkSigilKnight = {
		skills = {
			"WraithTraining",
			"MasteredRune",
			"ChargeMastery",
			"Dark Flame Burst",
			"Dark Eruption",
			"Dark Sigil Helmet",
		},
		type = "Ultra",
	},
	SigilKnightCommander = { skills = { "Charged Blow", "Hyper Body", "ChargeMastery" }, type = "Ultra" },
}

function Stats:getOrderlyValue()
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	if isfile(fileName) then
		local data = HttpService:JSONDecode(readfile(fileName))
		return data.stats and data.stats.orderlyValue or 0
	end
	return 0
end

function Stats:getHits(weaponType)
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	if isfile(fileName) then
		local data = HttpService:JSONDecode(readfile(fileName))
		return data.stats and data.stats[weaponType .. "Hits"] or 0
	end
	return 0
end

function Stats:addOrderly(value)
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	local data = {}
	if isfile(fileName) then
		data = HttpService:JSONDecode(readfile(fileName))
	end
	data.stats = data.stats or {}
	data.stats.orderlyValue = (data.stats.orderlyValue or 0) + value
	data.stats.gotOrderly = data.stats.orderlyValue >= 50
	writefile(fileName, HttpService:JSONEncode(data))
end

function Stats:addServerHop()
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	local data = {}
	if isfile(fileName) then
		data = HttpService:JSONDecode(readfile(fileName))
	end
	data.stats = data.stats or {}
	data.stats.serverHops = (data.stats.serverHops or 0) + 1
	writefile(fileName, HttpService:JSONEncode(data))
end

function Stats:addHit(weaponType)
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	local data = {}
	if isfile(fileName) then
		data = HttpService:JSONDecode(readfile(fileName))
	end
	data.stats = data.stats or {}
	data.stats[weaponType .. "Hits"] = (data.stats[weaponType .. "Hits"] or 0) + 1
	local totalHits = (data.stats.SwordHits or 0)
		+ (data.stats.SpearHits or 0)
		+ (data.stats.FistHits or 0)
		+ (data.stats.DaggerHits or 0)
	data.stats.gotHits = totalHits >= 100
	writefile(fileName, HttpService:JSONEncode(data))
end

local function arrayToSet(array)
	local set = {}
	for _, value in ipairs(array) do
		set[value] = true
	end
	return set
end

local function getPlayerInventory(player)
	if player:FindFirstChild("Backpack") then
		local inventorySet = {}
		for _, item in ipairs(player.Backpack:GetChildren()) do
			inventorySet[item.Name] = true
		end
		return inventorySet
	end
	return {}
end

function Stats:determineClass(player)
	local inventorySet = getPlayerInventory(player)
	for className, classInfo in pairs(classdata) do
		local hasAllSkills = true
		for _, skill in ipairs(classInfo.skills) do
			if not inventorySet[skill] then
				hasAllSkills = false
				break
			end
		end
		if hasAllSkills then
			return className, classInfo.type
		end
	end
	return nil, "No class matches the player's skills."
end

function Stats:getCompletedClasses()
	local player = Players.LocalPlayer
	local completedClasses = {}
	local inventorySet = getPlayerInventory(player)
	for className, classInfo in pairs(classdata) do
		local hasAllSkills = true
		for _, skill in ipairs(classInfo.skills) do
			if not inventorySet[skill] then
				hasAllSkills = false
				break
			end
		end
		if hasAllSkills then
			table.insert(completedClasses, className)
		end
	end
	return completedClasses
end

function Stats:getNeededClass()
	local completedClasses = self:getCompletedClasses()
	local completedClassesSet = arrayToSet(completedClasses)
	for ultraClass, lineage in pairs(ultraLineage) do
		local missingClasses = {}
		for _, requiredClass in ipairs(lineage) do
			if not completedClassesSet[requiredClass] then
				table.insert(missingClasses, requiredClass)
			end
		end
		if #missingClasses > 0 then
			return missingClasses[1], ultraClass
		end
	end
	return nil, "All ultra classes completed or no valid path found."
end

function Stats:determineNextClass()
	local neededClass, targetUltra = self:getNeededClass()
	if neededClass then
		return neededClass, "Next class in lineage for " .. targetUltra
	else
		local completedClasses = self:getCompletedClasses()
		for className, _ in pairs(classdata) do
			if not table.find(completedClasses, className) then
				return className, "Uncompleted class"
			end
		end
	end
	return nil, "All classes completed"
end

function Stats:findNextSkill()
	local player = Players.LocalPlayer
	local inventorySet = getPlayerInventory(player)
	local nextClass, reason = self:determineNextClass()
	if nextClass and classdata[nextClass] then
		for _, skill in ipairs(classdata[nextClass].skills) do
			if not inventorySet[skill] then
				return skill, nextClass
			end
		end
	end
	return nil, "All skills for the next class are already acquired or no next class found."
end

function Stats:loadPath()
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	if isfile(fileName) then
		local data = HttpService:JSONDecode(readfile(fileName))
		if data.currentPath and data.currentPath ~= "" then
			local decrypted = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_encryption_lua")["decrypt:Path"](data.currentPath, PATH_PASSKEY)
			return decrypted
		end
	end
	return {}
end

function Stats:savePath(pathTable)
	local player = Players.LocalPlayer
	local fileName = folderName .. "/" .. player.Name .. ".json"
	local data = {}
	if isfile(fileName) then
		data = HttpService:JSONDecode(readfile(fileName))
	end
	data.currentPath = Encryption["encrypt:Path"](pathTable, PATH_PASSKEY)
	writefile(fileName, HttpService:JSONEncode(data))
end

return Stats

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_maid_lua"] = function()
print("[LOAD] src/modules/maid.lua loaded")



local Maid = {}
Maid.ClassName = "Maid"


function Maid.new()
	return setmetatable({
		_tasks = {},
	}, Maid)
end


function Maid.isMaid(value)
	return type(value) == "table" and value.ClassName == "Maid"
end


function Maid:__index(index)
	if Maid[index] then
		return Maid[index]
	else
		return self._tasks[index]
	end
end


function Maid:__newindex(index, newTask)
	if Maid[index] ~= nil then
		error(string.format("Cannot use '%s' as a Maid key", tostring(index)), 2)
	end

	local tasks = self._tasks
	local job = tasks[index]

	if job == newTask then
		return
	end

	tasks[index] = newTask

	if job then
		local jobType = typeof(job)
		if jobType == "function" then
			job()
		elseif jobType == "table" then
			if type(job.Destroy) == "function" then
				job:Destroy()
			end
		elseif jobType == "Instance" then
			job:Destroy()
		elseif jobType == "thread" then
			local cancelled
			if coroutine.running() ~= job then
				cancelled = pcall(function()
					task.cancel(job)
				end)
			end

			if not cancelled then
				task.defer(function()
					task.cancel(job)
				end)
			end
		elseif jobType == "RBXScriptConnection" then
			job:Disconnect()
		end
	end
end


function Maid:Add(task)
	if not task then
		error("Task cannot be false or nil", 2)
	end

	self[#self._tasks + 1] = task

	if type(task) == "table" and not task.Destroy then
		warn("[Maid.Add] - Gave table task without .Destroy\n\n" .. debug.traceback())
	end

	return task
end


function Maid:GiveTask(task)
	if not task then
		error("Task cannot be false or nil", 2)
	end

	local taskId = #self._tasks + 1
	self[taskId] = task

	if type(task) == "table" and not task.Destroy then
		warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback())
	end

	return taskId
end


function Maid:GivePromise(promise)
	if not promise:IsPending() then
		return promise
	end

	local newPromise = promise.resolved(promise)
	local id = self:GiveTask(newPromise)

	
	newPromise:Finally(function()
		self[id] = nil
	end)

	return newPromise
end


function Maid:DoCleaning()
	local tasks = self._tasks

	
	for index, job in pairs(tasks) do
		if typeof(job) == "RBXScriptConnection" then
			tasks[index] = nil
			job:Disconnect()
		end
	end

	
	local index, job = next(tasks)
	while job ~= nil do
		tasks[index] = nil
		local jobType = typeof(job)
		if jobType == "function" then
			job()
		elseif jobType == "table" and type(job.Destroy) == "function" then
			job:Destroy()
		elseif jobType == "Instance" then
			job:Destroy()
		elseif jobType == "thread" then
			local cancelled
			if coroutine.running() ~= job then
				cancelled = pcall(function()
					task.cancel(job)
				end)
			end

			if not cancelled then
				local toCancel = job
				task.defer(function()
					task.cancel(toCancel)
				end)
			end
		elseif jobType == "RBXScriptConnection" then
			job:Disconnect()
		end
		index, job = next(tasks)
	end
end


Maid.Destroy = Maid.DoCleaning

return Maid

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Noclip_lua"] = function()
print("[LOAD] src/modules/Noclip.lua loaded")




local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Maid = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_maid_lua")

local Noclip = {}
Noclip.enabled = false
Noclip._maid = Maid.new()
Noclip._connection = nil
Noclip._originalStates = {}
Noclip._originalJumpPower = nil

local function setNoclipOnCharacter(character, stateTable)
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            if stateTable and stateTable[part] == nil then
                stateTable[part] = part.CanCollide
            end
            part.CanCollide = false
        end
    end
    local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
    local head = character:FindFirstChild("Head")
    if torso then torso.CanCollide = false end
    if head then head.CanCollide = false end
end

local function restoreCanCollide(character, stateTable)
    for part, original in pairs(stateTable) do
        if part and part:IsA("BasePart") then
            part.CanCollide = original
        end
    end
end

function Noclip:enable()
    if self.enabled then return end
    self.enabled = true
    local player = Players.LocalPlayer
    local function applyNoclip()
        local character = player and player.Character
        if character then
            setNoclipOnCharacter(character, self._originalStates)
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoid and humanoidRootPart then
                if not self._originalJumpPower then
                    self._originalJumpPower = humanoid.JumpPower
                end
                if humanoid.PlatformStand == false then
                    self._originalPlatformStand = false
                else
                    self._originalPlatformStand = true
                end
                humanoid.PlatformStand = true
                local originalVelocity = humanoidRootPart.Velocity
                humanoidRootPart.Velocity = Vector3.new(originalVelocity.X, 2, originalVelocity.Z)
                humanoid.JumpPower = 0
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
    self._connection = RunService.Stepped:Connect(function()
        if not self.enabled then return end
        local character = player and player.Character
        if character then
            setNoclipOnCharacter(character)
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoid and humanoidRootPart then
                humanoid.PlatformStand = true
                local originalVelocity = humanoidRootPart.Velocity
                humanoidRootPart.Velocity = Vector3.new(originalVelocity.X, 2, originalVelocity.Z)
                humanoid.JumpPower = 0
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                
                if humanoidRootPart.Position ~= humanoidRootPart.Position then return end
                local ray = Ray.new(humanoidRootPart.Position, humanoidRootPart.CFrame.LookVector * 2)
                local hit = workspace:FindPartOnRayWithIgnoreList(ray, {character})
                if hit then
                    humanoidRootPart.CFrame = humanoidRootPart.CFrame + humanoidRootPart.CFrame.LookVector * 0.2
                end
            end
        end
    end)
    self._maid:GiveTask(self._connection)
    self._maid:GiveTask(player.CharacterAdded:Connect(function(char)
        self._originalStates = {}
        self._originalJumpPower = nil
        self._originalPlatformStand = nil
        applyNoclip()
    end))
    applyNoclip()
end

function Noclip:disable()
    self.enabled = false
    self._maid:DoCleaning()
    local player = Players.LocalPlayer
    local character = player and player.Character
    if character then
        restoreCanCollide(character, self._originalStates)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid and self._originalJumpPower then
            humanoid.JumpPower = self._originalJumpPower
        end
        if humanoid and self._originalPlatformStand ~= nil then
            humanoid.PlatformStand = self._originalPlatformStand
        end
    end
    self._originalStates = {}
    self._originalJumpPower = nil
    self._originalPlatformStand = nil
    self._connection = nil
end

return Noclip

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Pickup_lua"] = function()
print("[LOAD] src/modules/Pickup.lua loaded")




local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Pickup = {}

function Pickup:enableTrinketPickup()
	self.trinketPickupEnabled = true
	task.spawn(function()
		self:autoPickupTrinkets()
	end)
end

function Pickup:disableTrinketPickup()
	self.trinketPickupEnabled = false
end

function Pickup:enableIngredientPickup()
	self.ingredientPickupEnabled = true
	task.spawn(function()
		self:autoPickupIngredients()
	end)
end

function Pickup:disableIngredientPickup()
	self.ingredientPickupEnabled = false
end

function Pickup:autoPickupTrinkets()
	while self.trinketPickupEnabled do
		local character = LocalPlayer.Character
		local rootPart = character and character.PrimaryPart
		if not rootPart then
			task.wait()
			continue
		end

		for _, trinket in pairs(workspace:GetChildren()) do
			if trinket:IsA("BasePart") then
				local clickDetector = trinket:FindFirstChild("ClickDetector", true)
				if clickDetector then
					local distance = (trinket.Position - rootPart.Position).Magnitude
					if distance < 50 then 
						fireclickdetector(clickDetector)
						print("Picked up trinket:", trinket.Name)
					end
				end
			end
		end
		task.wait(0.2)
	end
end

function Pickup:autoPickupIngredients()
	local ingredientsFolder
	for _, folder in next, workspace:GetChildren() do
		if folder:IsA("Folder") then
			local union = folder:FindFirstChild("UnionOperation")
			if union then
				ingredientsFolder = folder
				break
			end
		end
	end

	while self.ingredientPickupEnabled do
		local character = LocalPlayer.Character
		local rootPart = character and character.PrimaryPart
		if not rootPart then
			task.wait()
			continue
		end

		if ingredientsFolder then
			for _, ingredient in pairs(ingredientsFolder:GetChildren()) do
				if ingredient:IsA("BasePart") then
					local clickDetector = ingredient:FindFirstChildWhichIsA("ClickDetector", true)
					if clickDetector then
						local distance = (ingredient.Position - rootPart.Position).Magnitude
						if distance < 50 then
							fireclickdetector(clickDetector)
							print("Picked up ingredient:", ingredient.Name)
						end
					end
				end
			end
		end

		task.wait(0.2)
	end
end

return Pickup

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua"] = function()
print("[LOAD] src/modules/Config.lua loaded")




local Config = {
	PLAYER_DETECTION_RANGE = 250,
	MOVEMENT_SPEED = 150, 
	POINT_DELAY = 1, 
	DANGEROUS_TOOLS = {
		"Observe",
		"God Observe",
	},
}

return Config

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerCheck_lua"] = function()
print("[LOAD] src/modules/PlayerCheck.lua loaded")




local Players = game:GetService("Players")
local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local PlayerCheck = {}

function PlayerCheck:onPlayerAdded(player)
	local character = player.Character or player.CharacterAdded:Wait()
	character:WaitForChild("HumanoidRootPart")
	self:checkPlayerForDangerousTools(player)
end

function PlayerCheck:checkPlayerForDangerousTools(player)
	local backpack = player:FindFirstChild("Backpack")
	local character = player.Character

	if backpack then
		for _, toolName in ipairs(Config.DANGEROUS_TOOLS) do
			if backpack:FindFirstChild(toolName) then
				print(player.Name, "has dangerous tool:", toolName, "Server hopping...")
				return true
			end
		end
	end

	if character then
		for _, toolName in ipairs(Config.DANGEROUS_TOOLS) do
			if character:FindFirstChild(toolName) then
				print(player.Name, "is holding dangerous tool:", toolName, "Server hopping...")
				return true
			end
		end
	end
	return false
end

function PlayerCheck:checkAllPlayersForDangerousTools()
	print("Checking all players for dangerous tools.")
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= Players.LocalPlayer and self:checkPlayerForDangerousTools(player) then
			return true
		end
	end
	return false
end

return PlayerCheck

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_ServerHop_lua"] = function()
print("[LOAD] src/modules/ServerHop.lua loaded")




local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerHop = {}
ServerHop.isServerHopping = false

function ServerHop:hop()
	local Stats = require(script.Parent.Stats)
	print("[Bot:serverHop] Server hopping started.")
	self.isServerHopping = true
	Stats:addServerHop()

	local function getAvailableServers()
		print("[getAvailableServers] Fetching server list.")
		local response
		local success, errorMessage = pcall(function()
			response = http_request({
				Url = string.format("https://games.roblox.com/v1/games/%s/servers/Public?limit=100", game.PlaceId),
				Method = "GET",
			})
		end)

		if not success then
			warn("[getAvailableServers] HTTP request failed:", errorMessage)
			return {}
		end

		if response.StatusCode == 200 then
			print("Server list fetched successfully.")
			local data = HttpService:JSONDecode(response.Body)
			local servers = {}
			for _, server in ipairs(data.data) do
				table.insert(servers, server)
			end
			return servers
		else
			warn("[getAvailableServers] Failed to get available servers: StatusCode=", response.StatusCode)
			return {}
		end
	end

	local function joinServer(jobId)
		local success, errorMessage = pcall(function()
			local joinRequest = ReplicatedStorage:WaitForChild("Requests", 9999):WaitForChild("JoinPublicServer", 9999)
			joinRequest:FireServer(jobId)
		end)

		if success then
			self.isServerHopping = false
			print("[joinServer] Successfully initiated server hop to JobId:", jobId)
			return true
		else
			warn("[joinServer] Failed to join server:", errorMessage)
		end
	end

	while self.isServerHopping do
		print("[Bot:serverHop] Searching for a suitable server...")
		local servers = getAvailableServers()
		if #servers > 0 then
			local randomIndex = math.random(1, #servers)
			local serverInfo = servers[randomIndex]
			if joinServer(serverInfo.jobId) then
				break
			end
		else
			print("[Bot:serverHop] No suitable servers found. Retrying in 1.5 seconds...")
		end
		task.wait(1.5)
	end
end

function ServerHop:stop()
	self.isServerHopping = false
end

return ServerHop

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua"] = function()
print("[LOAD] src/modules/Inns.lua loaded")




local Inns = {
	Oresfall = Vector3.new(2967.634, 288.85, -16), 
	Southern = Vector3.new(-1255.422, 145.093, 340.663), 
	Wayside = Vector3.new(1336.531, 196.3, 931.763), 
	Santorini = Vector3.new(1341.703, 432.766, 2976.65), 
	Alana = Vector3.new(2253.484, 61.801, 552.427), 
	Tundra5 = Vector3.new(6168.783, 1345.494, 88.494), 
	Snail = Vector3.new(5759.284, 1115.494, 938.868), 
	Renova = Vector3.new(-2115.639, 610.454, -705.018), 
	Flowerlight = Vector3.new(3317.394, 202.368, -2520.07),
	SigilTree = Vector3.new(1879.793, 223.325, -795.055),
}
return Inns

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_EventManager_lua"] = function()
print("[LOAD] src/modules/EventManager.lua loaded")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")

local EventManager = {}



function EventManager.simulateButtonClick(button)
    if not button or not button.Visible then
        return false
    end
    VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + (button.AbsoluteSize.X / 2), (button.AbsolutePosition.Y + GuiService:GetGuiInset().Y) + (button.AbsoluteSize.Y / 2), 0, true, game, 0);
    task.wait()
    VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + (button.AbsoluteSize.X / 2), (button.AbsolutePosition.Y + GuiService:GetGuiInset().Y) + (button.AbsoluteSize.Y / 2), 0, false, game, 0);
    return true
end
local function getPlayButton()
    local player = Players.LocalPlayer
    if not player then return nil end
    local startMenu = player:WaitForChild("PlayerGui"):FindFirstChild("StartMenu", true)
    if not startMenu then return nil end
    local choices = startMenu:FindFirstChild("Choices", true)
    if not choices then return nil end
    local playButton = choices:FindFirstChild("Play", true)
    if not playButton then return nil end
    return playButton
end

function EventManager.simulatePlayButtonClick()
    local playButton = getPlayButton()
    if playButton then
        simulateButtonClick(playButton)
    end
end

EventManager.simulatePlayButtonClick()

getgenv().remotes = getgenv().remotes or {}
local PostDialogueRemote, SprintRemote, FallDamageRemote, ChangeAreaRemote, ManaChargeRemote, RollRemote, ClimbRemote = nil, nil, nil, nil, nil, nil, nil

local function cacheRemote(name, remote)
    getgenv().remotes[name] = remote
    _G[name .. "Remote"] = remote
    print("[Cache] Cached " .. name .. " remote: " .. tostring(remote))
end

local function cachePostDialogue(remote)
    cacheRemote("PostDialogue", remote)
    PostDialogueRemote = remote
end
local function cacheClimb(remote)
    cacheRemote("Climb", remote)
    ClimbRemote = remote
end
local function cacheSprint(remote)
    cacheRemote("Sprint", remote)
    SprintRemote = remote
end
local function cacheFallDamage(remote)
    cacheRemote("FallDamage", remote)
    FallDamageRemote = remote
end
local function cacheChangeArea(remote)
    cacheRemote("ChangeArea", remote)
    ChangeAreaRemote = remote
end
local function cacheManaCharge(remote)
    cacheRemote("ManaCharge", remote)
    ManaChargeRemote = remote
end
local function cacheRoll(remote)
    cacheRemote("Roll", remote)
    RollRemote = remote
end
local function printTable(tbl, indent)
	indent = indent or ""
	for k, v in pairs(tbl) do
		if type(v) == "table" then
			print(indent .. tostring(k) .. " (table):")
			printTable(v, indent .. "    ")
		else
			print(indent .. tostring(k) .. ": " .. tostring(v))
		end
	end
end
local function isPostDialogue(args)
	if #args == 1 and type(args[1]) == "table" then
		local argTable = args[1]
		if argTable.exit ~= nil and type(argTable.exit) == "boolean" then
			return true
		elseif argTable.choice ~= nil and type(argTable.choice) == "string" then
			return true
		end
	end
	return false
end
local function isSprint(args)
	if #args == 2 and type(args[1]) == "table" and type(args[2]) == "table" then
		local tbl1 = args[1]
		local tbl2 = args[2]
		if
			#tbl1 >= 2
			and type(tbl1[1]) == "number"
			and (tbl1[1] == 1 or tbl1[1] == 2)
			and type(tbl1[2]) == "number"
			and tbl1[2] >= 2
			and tbl1[2] <= 3
		then
			if next(tbl2) == nil then
				return true
			end
		end
	end
	return false
end
local function isFallDamage(args)
	if #args == 2 and type(args[1]) == "table" and type(args[2]) == "table" then
		local tbl1 = args[1]
		local tbl2 = args[2]
		if #tbl1 >= 2 and type(tbl1[1]) == "number" and type(tbl1[2]) == "number" then
			if tbl1[1] < 1 then
				if next(tbl2) == nil then
					return true
				end
			end
		end
	end
	return false
end
local function isChangeArea(args)
	if #args == 1 and type(args[1]) == "string" then
		return true
	end
	return false
end
local function isManaCharge(args)
	if #args == 0 then
		return true
	elseif #args == 1 and type(args[1]) == "table" then
		local tbl = args[1]
		if #tbl == 2 and type(tbl[1]) == "number" and type(tbl[2]) == "number" then
			return true
		end
	end
	return false
end
local function isRoll(args)
	if #args == 1 and type(args[1]) == "table" then
		local tbl = args[1]
		if rawget(tbl, 3) == nil then
			return false
		end
		if
			type(tbl[1]) == "number"
			and (tbl[1] == 1 or tbl[1] == 2 or tbl[1] == 3 or tbl[1] == 4)
			and type(tbl[2]) == "number"
			and type(tbl[3]) == "boolean"
		then
			return true
		end
	end
	return false
end

local function isClimb(args)
	if #args == 2 and type(args[1]) == "table" and type(args[2]) == "table" then
		local tbl1, tbl2 = args[1], args[2]
		if
			#tbl1 >= 2
			and type(tbl1[1]) == "number"
			and (tbl1[1] == 1 or tbl1[1] == 2)
			and type(tbl1[2]) == "number"
			and next(tbl2) == nil
		then
			return true
		end
	end
	return false
end
local OldFireServer
OldFireServer = hookfunction(
	Instance.new("RemoteEvent").FireServer,
	newcclosure(function(Event, ...)
		if not checkcaller() then
			if Event.Name:sub(1, 4) ~= "M0ai" then
				return OldFireServer(Event, ...)
			end
			local args = { ... }
			if isPostDialogue(args) then
				cachePostDialogue(Event)
			elseif isSprint(args) then
				cacheSprint(Event)
			elseif isClimb(args) then
				cacheClimb(Event)
			elseif isFallDamage(args) then
				cacheFallDamage(Event)
				return 
			elseif isChangeArea(args) then
				cacheChangeArea(Event)
			elseif isRoll(args) then
				cacheRoll(Event)
			elseif isManaCharge(args) then
				cacheManaCharge(Event)
			else
				return 
			end
		end

		return OldFireServer(Event, ...)
	end)
)

return EventManager
end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua"] = function()
print("[LOAD] src/modules/NpcInteraction.lua loaded")




local NpcInteraction = {}

local LocalPlayer = game.Players.LocalPlayer
local EventManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_EventManager_lua") 
local remotes = getgenv().remotes or {}

Trinkets = {
	"Emerald",
	"Ruby",
	"Sapphire",
	"Diamond",
	"Scroll of Viribus",
	"Scroll of Celeritas",
	"Scroll of Trickstus",
	"Scroll of Velo",
	"Scroll of Ignis",
	"Ice Essence",
	"Scroll of Tenebris",
	"Scroll of Contrarium",
	"Scroll of Nocere",
	"Scroll of Armis",
	"Scroll of Scrupus",
	"Scroll of Saggita Sol",
	"Candy",
}
BulkSell = {
	"Goblet",
	"Ring",
	"Old Ring",
	"Old Amulet",
	"Amulet",
	"Idol Of The Forgotten",
	"???",
}

function NpcInteraction:interactWithNPC(npcName)
    local character = LocalPlayer.Character
    if not character then
        return false
    end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        return false
    end
    local npcFolder = workspace:FindFirstChild("NPCs")
    if not npcFolder then
        return false
    end
    local closestNpc = nil
    local closestDistance = 10 
    for _, v in pairs(npcFolder:GetChildren()) do
        if v.Name == npcName and v:IsA("Model") then
            local npcRoot = v:FindFirstChild("HumanoidRootPart")
            if npcRoot then
                local distance = (rootPart.Position - npcRoot.Position).Magnitude
                if distance <= closestDistance then
                    closestDistance = distance
                    closestNpc = v
                end
            end
        end
    end
    if not closestNpc then
        return false
    end
    local clickDetector = closestNpc:FindFirstChildWhichIsA("ClickDetector", true)
    if not clickDetector then
        return false
    end
    fireclickdetector(clickDetector)
    print("Fired ClickDetector for NPC '" .. npcName .. "' at distance " .. tostring(closestDistance))
    return true
end

function NpcInteraction:getCurrentNpc()
	local character = LocalPlayer.Character
	if not character then
		return nil
	end

	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if not rootPart then
		return nil
	end

	local closestNpc = nil
	local closestDistance = math.huge
	local npcFolder = workspace:FindFirstChild("NPCs")
	if not npcFolder then
		return nil
	end

	for _, npc in pairs(npcFolder:GetChildren()) do
		local npcRoot = npc:FindFirstChild("HumanoidRootPart")
		if npcRoot then
			local dist = (rootPart.Position - npcRoot.Position).Magnitude
			if dist < closestDistance then
				closestDistance = dist
				closestNpc = npc
			end
		end
	end

	if closestNpc then
		return closestNpc.Name
	end
	return nil
end

function NpcInteraction:exitDialogue()
    local remotes = getgenv().remotes or {}
    if not remotes["PostDialogue"] then
        local player = game:GetService("Players").LocalPlayer
        local choices = player.PlayerGui:FindFirstChild("DialogueGui", true)
        if choices then
            local frame = choices:FindFirstChild("DialogueFrame", true)
            if frame then
                local choicesFrame = frame:FindFirstChild("Choices", true)
                if choicesFrame then
                    local byeButton = choicesFrame:FindFirstChild("Bye")
                    if byeButton then
                        EventManager.simulateButtonClick(byeButton)
                        task.wait(0.1)
                    end
                end
            end
        end
    end
    if remotes["PostDialogue"] then
	remotes["PostDialogue"]:FireServer({ exit = true })
    end
end

function NpcInteraction:choose(chosen)
    local remotes = getgenv().remotes or {}
    if not remotes["PostDialogue"] then
        local player = game:GetService("Players").LocalPlayer
        local choices = player.PlayerGui:FindFirstChild("DialogueGui", true)
        if choices then
            local frame = choices:FindFirstChild("DialogueFrame", true)
            if frame then
                local choicesFrame = frame:FindFirstChild("Choices", true)
                if choicesFrame then
                    local chosenButton = choicesFrame:FindFirstChild(chosen)
                    if chosenButton then
                        EventManager.simulateButtonClick(chosenButton)
                        task.wait(0.1)
                    end
                end
            end
        end
    end
    if remotes["PostDialogue"] then
		remotes["PostDialogue"]:FireServer({ choice = chosen })
    end
end

function NpcInteraction:waitForChoice(choiceText)
    local player = game:GetService("Players").LocalPlayer
    local timeout = 10
    local startTime = tick()
    while tick() - startTime < timeout do
        local dialogueGui = player.PlayerGui:FindFirstChild("DialogueGui", true)
        if dialogueGui then
            local frame = dialogueGui:FindFirstChild("DialogueFrame", true)
            if frame then
                local choicesFrame = frame:FindFirstChild("Choices", true)
                if choicesFrame then
                    local button = choicesFrame:FindFirstChild(choiceText)
                    if button then
                        return true
                    end
                end
            end
        end
        task.wait(0.1)
    end
    return false
end

function NpcInteraction:sellAllTrinkets()
	print("sellAllTrinkets not implemented.")
end

return NpcInteraction

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua"] = function()
print("[LOAD] src/modules/Movement.lua loaded")




local TweenService = game:GetService("TweenService")
local LocalPlayer = game.Players.LocalPlayer
local Movement = {}

function InnTeleport(point, npcName)
	local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
	local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")
	local player = LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local function isAlive()
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		return humanoid and humanoid.Health > 0
	end
	coroutine.wrap(function()
		while true do
			if not isAlive() then
				break
			end
			local success, err = pcall(function()
				character:PivotTo(CFrame.new(point))
				local humanoid = character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)
			if not success then
				warn("Error in teleport/jump thread: " .. err)
			end
			task.wait()
		end
	end)()
	coroutine.wrap(function()
		while true do
			if not isAlive() then
				break
			end
			local success, err = pcall(function()
				NpcInteraction:interactWithNPC(npcName)
				if npcName == "Inn Keeper" then
					NpcInteraction:waitForChoice("Sure.")
					NpcInteraction:choose("Sure.")
				end
				if npcName == "Ria" then
					NpcInteraction:waitForChoice("A room, please.")
					NpcInteraction:choose("A room, please.")
				end
			end)
			if not success then
				warn("Error in NPC interaction thread: " .. err)
			end
			task.wait(0.05)
		end
	end)()
	coroutine.wrap(function()
		task.wait(0.15)
		if isAlive() then
			local success, err = pcall(function()
				character:BreakJoints()
			end)
			if not success then
				warn("Error in kill thread: " .. err)
			end
		end
	end)()
end

function Movement:tweenToPoint(targetPosition, delay)
	local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
	local Noclip = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Noclip_lua")
	local ServerHop = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_ServerHop_lua")
	if ServerHop.isServerHopping then
		print("Server hop in progress. Skipping tweening.")
		return false
	end

	local character = LocalPlayer.Character
	if not character then
		warn("Character not found for LocalPlayer.")
		return false
	end

	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if not rootPart then
		warn("HumanoidRootPart not found for LocalPlayer.")
		return false
	end

	local distance = (rootPart.Position - targetPosition).Magnitude
	local duration = distance / Config.MOVEMENT_SPEED

	Noclip:enable()

	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
	local goalCFrame = CFrame.new(targetPosition)
	local tween = TweenService:Create(rootPart, tweenInfo, { CFrame = goalCFrame })

	tween:Play()
	tween.Completed:Wait()
	if delay then
		task.wait(delay)
	end

	Noclip:disable()
	return true
end

return Movement

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua"] = function()
print("[LOAD] src/modules/Bot.lua loaded")


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Maid = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_maid_lua")

local Bot = {}
Bot.__index = Bot
function Bot.act(func, ...)
	return { func = func, args = { ... } }
end
getgenv().act = Bot.act

function Bot.new()
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	local self = setmetatable({}, Bot)
	self.running = false
	self.currentPath = Stats:loadPath()
	self.maid = Maid.new()
	self.currentStatus = ""
	return self
end




function Bot:start(path)
	local Noclip = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Noclip_lua")
	local Pickup = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Pickup_lua")
	local PlayerCheck = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerCheck_lua")
	local ServerHop = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_ServerHop_lua")
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	if type(path) == "table" then
		self.currentPath = path
		Stats:savePath(self.currentPath)
	end
	if not self.currentPath or #self.currentPath == 0 then
		warn("No path provided. Exiting.")
		return
	end
	if self.running then
		warn("Bot is already running.")
		return
	end
	self.running = true
	
	if not self.maid or type(self.maid) ~= "table" or not self.maid.GiveTask then
		self.maid = Maid.new()
	end
	Noclip:enable()
	Pickup:enableTrinketPickup()
	Pickup:enableIngredientPickup()
	self.maid:GiveTask(Players.PlayerAdded:Connect(function(player)
		player:WaitForChild("Character")
		PlayerCheck:onPlayerAdded(player)
	end))
	self.maid:GiveTask(RunService.Heartbeat:Connect(function()
		if PlayerCheck:checkAllPlayersForDangerousTools() then
			print("Dangerous tool detected. Initiating server hop.")
			ServerHop:hop()
		end
	end))
	self:_runPath()
	self.running = false
end



function Bot:appendPath(newPath)
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	if not newPath or type(newPath) ~= "table" then
		warn("Invalid path provided to appendPath. Must be a table of points.")
		return
	end
	for _, point in ipairs(newPath) do
		table.insert(self.currentPath, point)
	end
	Stats:savePath(self.currentPath)
	self:updateBotFile()
	print("Appended new path. Total points now:", #self.currentPath)
end



function Bot:insertPathAt(index, newPath)
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	if type(index) ~= "number" or not newPath or type(newPath) ~= "table" then
		warn("Invalid parameters for insertPathAt. Provide a numeric index and a table of points.")
		return
	end
	for i, point in ipairs(newPath) do
		table.insert(self.currentPath, index + i - 1, point)
	end
	Stats:savePath(self.currentPath)
	self:updateBotFile()
	print("Inserted new path at index", index, ". Total points now:", #self.currentPath)
end




function Bot:_runPath()
	local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	while #self.currentPath > 0 and self.running do
		local point = self.currentPath[1]
		self.currentStatus = "Moving to point..."
		if point.position then
			print("Moving to position:", point.position)
			local success = Movement:tweenToPoint(point.position, 0)
			if not success then
				return
			end
		end
		if point.actions and type(point.actions) == "table" then
			for _, action in ipairs(point.actions) do
				if type(action) == "table" and action.func then
					action.func(unpack(action.args))
				elseif type(action) == "function" then
					action()
				end
			end
		end
		if point.delay and type(point.delay) == "number" then
			local remaining = point.delay
			while self.running and remaining > 0 do
				remaining = remaining - 0.1
				wait(0.1)
			end
		end

		
		table.remove(self.currentPath, 1)
		Stats:savePath(self.currentPath)
	end
	if #self.currentPath == 0 then
		print("Completed all points in the path.")
	end
end




function Bot:waitForPathCompletion()
	while self.running do
		wait(0.1)
	end
	return self.pathCompleted
end




function Bot:updateBotFile()
	local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
	local Encryption = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_encryption_lua")
	local player = Players.LocalPlayer
	local folderName = "Prog bot loaded account"
	local fileName = folderName .. "/" .. player.Name .. ".json"

	local className, classType = Stats:determineClass(player)
	local nextClass, nextClassReason = Stats:determineNextClass()
	local nextSkill, nextSkillClass = Stats:findNextSkill()
	local botData = {
		playerId = player.UserId,
		class = className or "Unknown",
		serverHops = 0,
		classType = classType or "Unknown",
		nextClass = nextClass,
		nextClassReason = nextClassReason,
		nextSkill = nextSkill,
		nextSkillClass = nextSkillClass,
		lastUpdated = os.date("!%Y-%m-%dT%H:%M:%SZ"),
		progress = {
			completedClasses = Stats:getCompletedClasses(),
		},
		inventory = {
			items = player:FindFirstChild("Backpack") and (function()
				local inv = {}
				for _, item in ipairs(player.Backpack:GetChildren()) do
					table.insert(inv, item.Name)
				end
				return inv
			end)() or {},
			silver = player:FindFirstChild("leaderstats")
					and player.leaderstats:FindFirstChild("Silver")
					and player.leaderstats.Silver.Value
				or 0,
		},
		stats = {
			CurrentSilver = player:FindFirstChild("PlayerGui")
					and player.PlayerGui:FindFirstChild("CurrencyGui")
					and tonumber(player.PlayerGui.CurrencyGui.Silver.Value.Text)
				or 0,
			GotSilver = player:FindFirstChild("PlayerGui")
					and player.PlayerGui:FindFirstChild("CurrencyGui")
					and (tonumber(player.PlayerGui.CurrencyGui.Silver.Value.Text) or 0) >= 2500
				or false,
			orderlyValue = Stats:getOrderlyValue(),
			gotOrderly = Stats:getOrderlyValue() >= 50,
			SwordHits = Stats:getHits("Sword"),
			SpearHits = Stats:getHits("Spear"),
			FistHits = Stats:getHits("Fist"),
			DaggerHits = Stats:getHits("Dagger"),
			gotHits = (
				Stats:getHits("Sword") >= 300
				or Stats:getHits("Spear") >= 300
				or Stats:getHits("Fist") >= 300
				or Stats:getHits("Dagger")
			) >= 300,
		},
		Path = Encryption["encrypt:Path"](self.currentPath, PATH_PASSKEY),
		currentlyDoing = self.currentStatus or "N/A",
	}

	local jsonString = HttpService:JSONEncode(botData)
	writefile(fileName, jsonString)
	print("Updated bot file:", fileName)
end




function Bot:findNearestTrinket()
	local player = Players.LocalPlayer
	local character = player.Character
	if not character then
		return nil
	end
	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if not rootPart then
		return nil
	end

	local nearestTrinket, nearestDistance = nil, math.huge
	for _, obj in pairs(workspace:GetDescendants()) do
		if obj:IsA("BasePart") and obj:FindFirstChild("ClickDetector") then
			local distance = (obj.Position - rootPart.Position).Magnitude
			if distance < nearestDistance then
				nearestTrinket = obj
				nearestDistance = distance
			end
		end
	end
	return nearestTrinket
end

function Bot:pickupNearestTrinket()
	local trinket = self:findNearestTrinket()
	if trinket then
		local clickDetector = trinket:FindFirstChild("ClickDetector")
		if clickDetector then
			local player = Players.LocalPlayer
			local character = player.Character
			if character and character:FindFirstChild("HumanoidRootPart") then
				local distance = (trinket.Position - character.HumanoidRootPart.Position).Magnitude
				if distance <= 25 then
					fireclickdetector(clickDetector)
					print("Picked up trinket:", trinket.Name)
					return true
				else
					print("Trinket '" .. trinket.Name .. "' is too far to pick up.")
				end
			end
		end
	else
		print("No trinkets found nearby.")
	end
	return false
end




function Bot:stop()
	local Noclip = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Noclip_lua")
	local Pickup = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Pickup_lua")
	self.running = false
	self.maid:DoCleaning()
	Noclip:disable()
	Pickup:disableTrinketPickup()
	Pickup:disableIngredientPickup()
end

return Bot

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_UILibrary_lua"] = function()
print("[LOAD] shared/UILibrary.lua loaded")

local InputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local Teams = game:GetService("Teams")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local RenderStepped = RunService.RenderStepped
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local ProtectGui = protectgui or (syn and syn.protect_gui) or function() end

local ScreenGui = Instance.new("ScreenGui")
ProtectGui(ScreenGui)

ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
ScreenGui.Parent = CoreGui

local Toggles = {}
local Options = {}

getgenv().Toggles = Toggles
getgenv().Options = Options

local Library = {
	Registry = {},
	RegistryMap = {},

	HudRegistry = {},

	FontColor = Color3.fromRGB(255, 255, 255),
	MainColor = Color3.fromRGB(28, 28, 28),
	BackgroundColor = Color3.fromRGB(20, 20, 20),
	AccentColor = Color3.fromRGB(0, 85, 255),
	OutlineColor = Color3.fromRGB(50, 50, 50),
	RiskColor = Color3.fromRGB(255, 50, 50),

	Black = Color3.new(0, 0, 0),
	Font = Enum.Font.Code,

	OpenedFrames = {},
	DependencyBoxes = {},

	Signals = {},
	ScreenGui = ScreenGui,
}

local RainbowStep = 0
local Hue = 0

table.insert(
	Library.Signals,
	RenderStepped:Connect(function(Delta)
		RainbowStep = RainbowStep + Delta

		if RainbowStep >= (1 / 60) then
			RainbowStep = 0

			Hue = Hue + (1 / 400)

			if Hue > 1 then
				Hue = 0
			end

			Library.CurrentRainbowHue = Hue
			Library.CurrentRainbowColor = Color3.fromHSV(Hue, 0.8, 1)
		end
	end)
)

local function GetPlayersString()
	local PlayerList = Players:GetPlayers()

	for i = 1, #PlayerList do
		PlayerList[i] = PlayerList[i].Name
	end

	table.sort(PlayerList, function(str1, str2)
		return str1 < str2
	end)

	return PlayerList
end

local function GetTeamsString()
	local TeamList = Teams:GetTeams()

	for i = 1, #TeamList do
		TeamList[i] = TeamList[i].Name
	end

	table.sort(TeamList, function(str1, str2)
		return str1 < str2
	end)

	return TeamList
end

function Library:SafeCallback(f, ...)
	if not f then
		return
	end

	if not Library.NotifyOnError then
		return f(...)
	end

	local success, event = pcall(f, ...)

	if not success then
		local _, i = event:find(":%d+: ")

		if not i then
			return Library:Notify(event)
		end

		return Library:Notify(event:sub(i + 1), 3)
	end
end

function Library:AttemptSave()
	if Library.SaveManager then
		Library.SaveManager:Save()
	end
end

function Library:Create(Class, Properties)
	local _Instance = Class

	if type(Class) == "string" then
		_Instance = Instance.new(Class)
	end

	for Property, Value in next, Properties do
		_Instance[Property] = Value
	end

	return _Instance
end

function Library:ApplyTextStroke(Inst)
	Inst.TextStrokeTransparency = 1

	Library:Create("UIStroke", {
		Color = Color3.new(0, 0, 0),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Miter,
		Parent = Inst,
	})
end

function Library:CreateLabel(Properties, IsHud)
	local _Instance = Library:Create("TextLabel", {
		BackgroundTransparency = 1,
		Font = Library.Font,
		TextColor3 = Library.FontColor,
		TextSize = 16,
		TextStrokeTransparency = 0,
	})

	Library:ApplyTextStroke(_Instance)

	Library:AddToRegistry(_Instance, {
		TextColor3 = "FontColor",
	}, IsHud)

	return Library:Create(_Instance, Properties)
end

function Library:MakeDraggable(Instance, Cutoff)
	Instance.Active = true

	Instance.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			local ObjPos = Vector2.new(Mouse.X - Instance.AbsolutePosition.X, Mouse.Y - Instance.AbsolutePosition.Y)

			if ObjPos.Y > (Cutoff or 40) then
				return
			end

			while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
				Instance.Position = UDim2.new(
					0,
					Mouse.X - ObjPos.X + (Instance.Size.X.Offset * Instance.AnchorPoint.X),
					0,
					Mouse.Y - ObjPos.Y + (Instance.Size.Y.Offset * Instance.AnchorPoint.Y)
				)

				RenderStepped:Wait()
			end
		end
	end)
end

function Library:AddToolTip(InfoStr, HoverInstance)
	local X, Y = Library:GetTextBounds(InfoStr, Library.Font, 14)
	local Tooltip = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.OutlineColor,

		Size = UDim2.fromOffset(X + 5, Y + 4),
		ZIndex = 100,
		Parent = Library.ScreenGui,

		Visible = false,
	})

	local Label = Library:CreateLabel({
		Position = UDim2.fromOffset(3, 1),
		Size = UDim2.fromOffset(X, Y),
		TextSize = 14,
		Text = InfoStr,
		TextColor3 = Library.FontColor,
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = Tooltip.ZIndex + 1,

		Parent = Tooltip,
	})

	Library:AddToRegistry(Tooltip, {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "OutlineColor",
	})

	Library:AddToRegistry(Label, {
		TextColor3 = "FontColor",
	})

	local IsHovering = false

	HoverInstance.MouseEnter:Connect(function()
		if Library:MouseIsOverOpenedFrame() then
			return
		end

		IsHovering = true

		Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
		Tooltip.Visible = true

		while IsHovering do
			RunService.Heartbeat:Wait()
			Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
		end
	end)

	HoverInstance.MouseLeave:Connect(function()
		IsHovering = false
		Tooltip.Visible = false
	end)
end

function Library:OnHighlight(HighlightInstance, Instance, Properties, PropertiesDefault)
	HighlightInstance.MouseEnter:Connect(function()
		local Reg = Library.RegistryMap[Instance]

		for Property, ColorIdx in next, Properties do
			Instance[Property] = Library[ColorIdx] or ColorIdx

			if Reg and Reg.Properties[Property] then
				Reg.Properties[Property] = ColorIdx
			end
		end
	end)

	HighlightInstance.MouseLeave:Connect(function()
		local Reg = Library.RegistryMap[Instance]

		for Property, ColorIdx in next, PropertiesDefault do
			Instance[Property] = Library[ColorIdx] or ColorIdx

			if Reg and Reg.Properties[Property] then
				Reg.Properties[Property] = ColorIdx
			end
		end
	end)
end

function Library:MouseIsOverOpenedFrame()
	for Frame, _ in next, Library.OpenedFrames do
		local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize

		if
			Mouse.X >= AbsPos.X
			and Mouse.X <= AbsPos.X + AbsSize.X
			and Mouse.Y >= AbsPos.Y
			and Mouse.Y <= AbsPos.Y + AbsSize.Y
		then
			return true
		end
	end
end

function Library:IsMouseOverFrame(Frame)
	local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize

	if
		Mouse.X >= AbsPos.X
		and Mouse.X <= AbsPos.X + AbsSize.X
		and Mouse.Y >= AbsPos.Y
		and Mouse.Y <= AbsPos.Y + AbsSize.Y
	then
		return true
	end
end

function Library:UpdateDependencyBoxes()
	for _, Depbox in next, Library.DependencyBoxes do
		Depbox:Update()
	end
end

function Library:MapValue(Value, MinA, MaxA, MinB, MaxB)
	return (1 - ((Value - MinA) / (MaxA - MinA))) * MinB + ((Value - MinA) / (MaxA - MinA)) * MaxB
end

function Library:GetTextBounds(Text, Font, Size, Resolution)
	local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
	return Bounds.X, Bounds.Y
end

function Library:GetDarkerColor(Color)
	local H, S, V = Color3.toHSV(Color)
	return Color3.fromHSV(H, S, V / 1.5)
end
Library.AccentColorDark = Library:GetDarkerColor(Library.AccentColor)

function Library:AddToRegistry(Instance, Properties, IsHud)
	local Idx = #Library.Registry + 1
	local Data = {
		Instance = Instance,
		Properties = Properties,
		Idx = Idx,
	}

	table.insert(Library.Registry, Data)
	Library.RegistryMap[Instance] = Data

	if IsHud then
		table.insert(Library.HudRegistry, Data)
	end
end

function Library:RemoveFromRegistry(Instance)
	local Data = Library.RegistryMap[Instance]

	if Data then
		for Idx = #Library.Registry, 1, -1 do
			if Library.Registry[Idx] == Data then
				table.remove(Library.Registry, Idx)
			end
		end

		for Idx = #Library.HudRegistry, 1, -1 do
			if Library.HudRegistry[Idx] == Data then
				table.remove(Library.HudRegistry, Idx)
			end
		end

		Library.RegistryMap[Instance] = nil
	end
end

function Library:UpdateColorsUsingRegistry()
	
	

	
	
	
	

	

	for Idx, Object in next, Library.Registry do
		for Property, ColorIdx in next, Object.Properties do
			if type(ColorIdx) == "string" then
				Object.Instance[Property] = Library[ColorIdx]
			elseif type(ColorIdx) == "function" then
				Object.Instance[Property] = ColorIdx()
			end
		end
	end
end

function Library:GiveSignal(Signal)
	
	table.insert(Library.Signals, Signal)
end

function Library:Unload()
	
	for Idx = #Library.Signals, 1, -1 do
		local Connection = table.remove(Library.Signals, Idx)
		Connection:Disconnect()
	end

	
	if Library.OnUnload then
		Library.OnUnload()
	end

	ScreenGui:Destroy()
end

function Library:OnUnload(Callback)
	Library.OnUnload = Callback
end

Library:GiveSignal(ScreenGui.DescendantRemoving:Connect(function(Instance)
	if Library.RegistryMap[Instance] then
		Library:RemoveFromRegistry(Instance)
	end
end))

local BaseAddons = {}

do
	local Funcs = {}

	function Funcs:AddColorPicker(Idx, Info)
		local ToggleLabel = self.TextLabel
		

		assert(Info.Default, "AddColorPicker: Missing default value.")

		local ColorPicker = {
			Value = Info.Default,
			Transparency = Info.Transparency or 0,
			Type = "ColorPicker",
			Title = type(Info.Title) == "string" and Info.Title or "Color picker",
			Callback = Info.Callback or function(Color) end,
		}

		function ColorPicker:SetHSVFromRGB(Color)
			local H, S, V = Color3.toHSV(Color)

			ColorPicker.Hue = H
			ColorPicker.Sat = S
			ColorPicker.Vib = V
		end

		ColorPicker:SetHSVFromRGB(ColorPicker.Value)

		local DisplayFrame = Library:Create("Frame", {
			BackgroundColor3 = ColorPicker.Value,
			BorderColor3 = Library:GetDarkerColor(ColorPicker.Value),
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(0, 28, 0, 14),
			ZIndex = 6,
			Parent = ToggleLabel,
		})

		
		local CheckerFrame = Library:Create("ImageLabel", {
			BorderSizePixel = 0,
			Size = UDim2.new(0, 27, 0, 13),
			ZIndex = 5,
			Image = "http://www.roblox.com/asset/?id=12977615774",
			Visible = not not Info.Transparency,
			Parent = DisplayFrame,
		})

		
		
		
		

		local PickerFrameOuter = Library:Create("Frame", {
			Name = "Color",
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			Position = UDim2.fromOffset(DisplayFrame.AbsolutePosition.X, DisplayFrame.AbsolutePosition.Y + 18),
			Size = UDim2.fromOffset(230, Info.Transparency and 271 or 253),
			Visible = false,
			ZIndex = 15,
			Parent = ScreenGui,
		})

		DisplayFrame:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
			PickerFrameOuter.Position =
				UDim2.fromOffset(DisplayFrame.AbsolutePosition.X, DisplayFrame.AbsolutePosition.Y + 18)
		end)

		local PickerFrameInner = Library:Create("Frame", {
			BackgroundColor3 = Library.BackgroundColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 16,
			Parent = PickerFrameOuter,
		})

		local Highlight = Library:Create("Frame", {
			BackgroundColor3 = Library.AccentColor,
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 0, 2),
			ZIndex = 17,
			Parent = PickerFrameInner,
		})

		local SatVibMapOuter = Library:Create("Frame", {
			BorderColor3 = Color3.new(0, 0, 0),
			Position = UDim2.new(0, 4, 0, 25),
			Size = UDim2.new(0, 200, 0, 200),
			ZIndex = 17,
			Parent = PickerFrameInner,
		})

		local SatVibMapInner = Library:Create("Frame", {
			BackgroundColor3 = Library.BackgroundColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 18,
			Parent = SatVibMapOuter,
		})

		local SatVibMap = Library:Create("ImageLabel", {
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 18,
			Image = "rbxassetid://4155801252",
			Parent = SatVibMapInner,
		})

		local CursorOuter = Library:Create("ImageLabel", {
			AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 6, 0, 6),
			BackgroundTransparency = 1,
			Image = "http://www.roblox.com/asset/?id=9619665977",
			ImageColor3 = Color3.new(0, 0, 0),
			ZIndex = 19,
			Parent = SatVibMap,
		})

		local CursorInner = Library:Create("ImageLabel", {
			Size = UDim2.new(0, CursorOuter.Size.X.Offset - 2, 0, CursorOuter.Size.Y.Offset - 2),
			Position = UDim2.new(0, 1, 0, 1),
			BackgroundTransparency = 1,
			Image = "http://www.roblox.com/asset/?id=9619665977",
			ZIndex = 20,
			Parent = CursorOuter,
		})

		local HueSelectorOuter = Library:Create("Frame", {
			BorderColor3 = Color3.new(0, 0, 0),
			Position = UDim2.new(0, 208, 0, 25),
			Size = UDim2.new(0, 15, 0, 200),
			ZIndex = 17,
			Parent = PickerFrameInner,
		})

		local HueSelectorInner = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 18,
			Parent = HueSelectorOuter,
		})

		local HueCursor = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(1, 1, 1),
			AnchorPoint = Vector2.new(0, 0.5),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(1, 0, 0, 1),
			ZIndex = 18,
			Parent = HueSelectorInner,
		})

		local HueBoxOuter = Library:Create("Frame", {
			BorderColor3 = Color3.new(0, 0, 0),
			Position = UDim2.fromOffset(4, 228),
			Size = UDim2.new(0.5, -6, 0, 20),
			ZIndex = 18,
			Parent = PickerFrameInner,
		})

		local HueBoxInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 18,
			Parent = HueBoxOuter,
		})

		Library:Create("UIGradient", {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212)),
			}),
			Rotation = 90,
			Parent = HueBoxInner,
		})

		local HueBox = Library:Create("TextBox", {
			BackgroundTransparency = 1,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -5, 1, 0),
			Font = Library.Font,
			PlaceholderColor3 = Color3.fromRGB(190, 190, 190),
			PlaceholderText = "Hex color",
			Text = "#FFFFFF",
			TextColor3 = Library.FontColor,
			TextSize = 14,
			TextStrokeTransparency = 0,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 20,
			Parent = HueBoxInner,
		})

		Library:ApplyTextStroke(HueBox)

		local RgbBoxBase = Library:Create(HueBoxOuter:Clone(), {
			Position = UDim2.new(0.5, 2, 0, 228),
			Size = UDim2.new(0.5, -6, 0, 20),
			Parent = PickerFrameInner,
		})

		local RgbBox = Library:Create(RgbBoxBase.Frame:FindFirstChild("TextBox"), {
			Text = "255, 255, 255",
			PlaceholderText = "RGB color",
			TextColor3 = Library.FontColor,
		})

		local TransparencyBoxOuter, TransparencyBoxInner, TransparencyCursor

		if Info.Transparency then
			TransparencyBoxOuter = Library:Create("Frame", {
				BorderColor3 = Color3.new(0, 0, 0),
				Position = UDim2.fromOffset(4, 251),
				Size = UDim2.new(1, -8, 0, 15),
				ZIndex = 19,
				Parent = PickerFrameInner,
			})

			TransparencyBoxInner = Library:Create("Frame", {
				BackgroundColor3 = ColorPicker.Value,
				BorderColor3 = Library.OutlineColor,
				BorderMode = Enum.BorderMode.Inset,
				Size = UDim2.new(1, 0, 1, 0),
				ZIndex = 19,
				Parent = TransparencyBoxOuter,
			})

			Library:AddToRegistry(TransparencyBoxInner, { BorderColor3 = "OutlineColor" })

			Library:Create("ImageLabel", {
				BackgroundTransparency = 1,
				Size = UDim2.new(1, 0, 1, 0),
				Image = "http://www.roblox.com/asset/?id=12978095818",
				ZIndex = 20,
				Parent = TransparencyBoxInner,
			})

			TransparencyCursor = Library:Create("Frame", {
				BackgroundColor3 = Color3.new(1, 1, 1),
				AnchorPoint = Vector2.new(0.5, 0),
				BorderColor3 = Color3.new(0, 0, 0),
				Size = UDim2.new(0, 1, 1, 0),
				ZIndex = 21,
				Parent = TransparencyBoxInner,
			})
		end

		local DisplayLabel = Library:CreateLabel({
			Size = UDim2.new(1, 0, 0, 14),
			Position = UDim2.fromOffset(5, 5),
			TextXAlignment = Enum.TextXAlignment.Left,
			TextSize = 14,
			Text = ColorPicker.Title, 
			TextWrapped = false,
			ZIndex = 16,
			Parent = PickerFrameInner,
		})

		local ContextMenu = {}
		do
			ContextMenu.Options = {}
			ContextMenu.Container = Library:Create("Frame", {
				BorderColor3 = Color3.new(),
				ZIndex = 14,

				Visible = false,
				Parent = ScreenGui,
			})

			ContextMenu.Inner = Library:Create("Frame", {
				BackgroundColor3 = Library.BackgroundColor,
				BorderColor3 = Library.OutlineColor,
				BorderMode = Enum.BorderMode.Inset,
				Size = UDim2.fromScale(1, 1),
				ZIndex = 15,
				Parent = ContextMenu.Container,
			})

			Library:Create("UIListLayout", {
				Name = "Layout",
				FillDirection = Enum.FillDirection.Vertical,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = ContextMenu.Inner,
			})

			Library:Create("UIPadding", {
				Name = "Padding",
				PaddingLeft = UDim.new(0, 4),
				Parent = ContextMenu.Inner,
			})

			local function updateMenuPosition()
				ContextMenu.Container.Position = UDim2.fromOffset(
					(DisplayFrame.AbsolutePosition.X + DisplayFrame.AbsoluteSize.X) + 4,
					DisplayFrame.AbsolutePosition.Y + 1
				)
			end

			local function updateMenuSize()
				local menuWidth = 60
				for i, label in next, ContextMenu.Inner:GetChildren() do
					if label:IsA("TextLabel") then
						menuWidth = math.max(menuWidth, label.TextBounds.X)
					end
				end

				ContextMenu.Container.Size =
					UDim2.fromOffset(menuWidth + 8, ContextMenu.Inner.Layout.AbsoluteContentSize.Y + 4)
			end

			DisplayFrame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateMenuPosition)
			ContextMenu.Inner.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateMenuSize)

			task.spawn(updateMenuPosition)
			task.spawn(updateMenuSize)

			Library:AddToRegistry(ContextMenu.Inner, {
				BackgroundColor3 = "BackgroundColor",
				BorderColor3 = "OutlineColor",
			})

			function ContextMenu:Show()
				self.Container.Visible = true
			end

			function ContextMenu:Hide()
				self.Container.Visible = false
			end

			function ContextMenu:AddOption(Str, Callback)
				if type(Callback) ~= "function" then
					Callback = function() end
				end

				local Button = Library:CreateLabel({
					Active = false,
					Size = UDim2.new(1, 0, 0, 15),
					TextSize = 13,
					Text = Str,
					ZIndex = 16,
					Parent = self.Inner,
					TextXAlignment = Enum.TextXAlignment.Left,
				})

				Library:OnHighlight(Button, Button, { TextColor3 = "AccentColor" }, { TextColor3 = "FontColor" })

				Button.InputBegan:Connect(function(Input)
					if Input.UserInputType ~= Enum.UserInputType.MouseButton1 then
						return
					end

					Callback()
				end)
			end

			ContextMenu:AddOption("Copy color", function()
				Library.ColorClipboard = ColorPicker.Value
				Library:Notify("Copied color!", 2)
			end)

			ContextMenu:AddOption("Paste color", function()
				if not Library.ColorClipboard then
					return Library:Notify("You have not copied a color!", 2)
				end
				ColorPicker:SetValueRGB(Library.ColorClipboard)
			end)

			ContextMenu:AddOption("Copy HEX", function()
				pcall(setclipboard, ColorPicker.Value:ToHex())
				Library:Notify("Copied hex code to clipboard!", 2)
			end)

			ContextMenu:AddOption("Copy RGB", function()
				pcall(
					setclipboard,
					table.concat({
						math.floor(ColorPicker.Value.R * 255),
						math.floor(ColorPicker.Value.G * 255),
						math.floor(ColorPicker.Value.B * 255),
					}, ", ")
				)
				Library:Notify("Copied RGB values to clipboard!", 2)
			end)
		end

		Library:AddToRegistry(PickerFrameInner, { BackgroundColor3 = "BackgroundColor", BorderColor3 = "OutlineColor" })
		Library:AddToRegistry(Highlight, { BackgroundColor3 = "AccentColor" })
		Library:AddToRegistry(SatVibMapInner, { BackgroundColor3 = "BackgroundColor", BorderColor3 = "OutlineColor" })

		Library:AddToRegistry(HueBoxInner, { BackgroundColor3 = "MainColor", BorderColor3 = "OutlineColor" })
		Library:AddToRegistry(RgbBoxBase.Frame, { BackgroundColor3 = "MainColor", BorderColor3 = "OutlineColor" })
		Library:AddToRegistry(RgbBox, { TextColor3 = "FontColor" })
		Library:AddToRegistry(HueBox, { TextColor3 = "FontColor" })

		local SequenceTable = {}

		for Hue = 0, 1, 0.1 do
			table.insert(SequenceTable, ColorSequenceKeypoint.new(Hue, Color3.fromHSV(Hue, 1, 1)))
		end

		local HueSelectorGradient = Library:Create("UIGradient", {
			Color = ColorSequence.new(SequenceTable),
			Rotation = 90,
			Parent = HueSelectorInner,
		})

		HueBox.FocusLost:Connect(function(enter)
			if enter then
				local success, result = pcall(Color3.fromHex, HueBox.Text)
				if success and typeof(result) == "Color3" then
					ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(result)
				end
			end

			ColorPicker:Display()
		end)

		RgbBox.FocusLost:Connect(function(enter)
			if enter then
				local r, g, b = RgbBox.Text:match("(%d+),%s*(%d+),%s*(%d+)")
				if r and g and b then
					ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(Color3.fromRGB(r, g, b))
				end
			end

			ColorPicker:Display()
		end)

		function ColorPicker:Display()
			ColorPicker.Value = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib)
			SatVibMap.BackgroundColor3 = Color3.fromHSV(ColorPicker.Hue, 1, 1)

			Library:Create(DisplayFrame, {
				BackgroundColor3 = ColorPicker.Value,
				BackgroundTransparency = ColorPicker.Transparency,
				BorderColor3 = Library:GetDarkerColor(ColorPicker.Value),
			})

			if TransparencyBoxInner then
				TransparencyBoxInner.BackgroundColor3 = ColorPicker.Value
				TransparencyCursor.Position = UDim2.new(1 - ColorPicker.Transparency, 0, 0, 0)
			end

			CursorOuter.Position = UDim2.new(ColorPicker.Sat, 0, 1 - ColorPicker.Vib, 0)
			HueCursor.Position = UDim2.new(0, 0, ColorPicker.Hue, 0)

			HueBox.Text = "#" .. ColorPicker.Value:ToHex()
			RgbBox.Text = table.concat({
				math.floor(ColorPicker.Value.R * 255),
				math.floor(ColorPicker.Value.G * 255),
				math.floor(ColorPicker.Value.B * 255),
			}, ", ")

			Library:SafeCallback(ColorPicker.Callback, ColorPicker.Value)
			Library:SafeCallback(ColorPicker.Changed, ColorPicker.Value)
		end

		function ColorPicker:OnChanged(Func)
			ColorPicker.Changed = Func
			Func(ColorPicker.Value)
		end

		function ColorPicker:Show()
			for Frame, Val in next, Library.OpenedFrames do
				if Frame.Name == "Color" then
					Frame.Visible = false
					Library.OpenedFrames[Frame] = nil
				end
			end

			PickerFrameOuter.Visible = true
			Library.OpenedFrames[PickerFrameOuter] = true
		end

		function ColorPicker:Hide()
			PickerFrameOuter.Visible = false
			Library.OpenedFrames[PickerFrameOuter] = nil
		end

		function ColorPicker:SetValue(HSV, Transparency)
			local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3])

			ColorPicker.Transparency = Transparency or 0
			ColorPicker:SetHSVFromRGB(Color)
			ColorPicker:Display()
		end

		function ColorPicker:SetValueRGB(Color, Transparency)
			ColorPicker.Transparency = Transparency or 0
			ColorPicker:SetHSVFromRGB(Color)
			ColorPicker:Display()
		end

		SatVibMap.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
					local MinX = SatVibMap.AbsolutePosition.X
					local MaxX = MinX + SatVibMap.AbsoluteSize.X
					local MouseX = math.clamp(Mouse.X, MinX, MaxX)

					local MinY = SatVibMap.AbsolutePosition.Y
					local MaxY = MinY + SatVibMap.AbsoluteSize.Y
					local MouseY = math.clamp(Mouse.Y, MinY, MaxY)

					ColorPicker.Sat = (MouseX - MinX) / (MaxX - MinX)
					ColorPicker.Vib = 1 - ((MouseY - MinY) / (MaxY - MinY))
					ColorPicker:Display()

					RenderStepped:Wait()
				end

				Library:AttemptSave()
			end
		end)

		HueSelectorInner.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
					local MinY = HueSelectorInner.AbsolutePosition.Y
					local MaxY = MinY + HueSelectorInner.AbsoluteSize.Y
					local MouseY = math.clamp(Mouse.Y, MinY, MaxY)

					ColorPicker.Hue = ((MouseY - MinY) / (MaxY - MinY))
					ColorPicker:Display()

					RenderStepped:Wait()
				end

				Library:AttemptSave()
			end
		end)

		DisplayFrame.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
				if PickerFrameOuter.Visible then
					ColorPicker:Hide()
				else
					ContextMenu:Hide()
					ColorPicker:Show()
				end
			elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and not Library:MouseIsOverOpenedFrame() then
				ContextMenu:Show()
				ColorPicker:Hide()
			end
		end)

		if TransparencyBoxInner then
			TransparencyBoxInner.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
						local MinX = TransparencyBoxInner.AbsolutePosition.X
						local MaxX = MinX + TransparencyBoxInner.AbsoluteSize.X
						local MouseX = math.clamp(Mouse.X, MinX, MaxX)

						ColorPicker.Transparency = 1 - ((MouseX - MinX) / (MaxX - MinX))

						ColorPicker:Display()

						RenderStepped:Wait()
					end

					Library:AttemptSave()
				end
			end)
		end

		Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local AbsPos, AbsSize = PickerFrameOuter.AbsolutePosition, PickerFrameOuter.AbsoluteSize

				if
					Mouse.X < AbsPos.X
					or Mouse.X > AbsPos.X + AbsSize.X
					or Mouse.Y < (AbsPos.Y - 20 - 1)
					or Mouse.Y > AbsPos.Y + AbsSize.Y
				then
					ColorPicker:Hide()
				end

				if not Library:IsMouseOverFrame(ContextMenu.Container) then
					ContextMenu:Hide()
				end
			end

			if Input.UserInputType == Enum.UserInputType.MouseButton2 and ContextMenu.Container.Visible then
				if
					not Library:IsMouseOverFrame(ContextMenu.Container) and not Library:IsMouseOverFrame(DisplayFrame)
				then
					ContextMenu:Hide()
				end
			end
		end))

		ColorPicker:Display()
		ColorPicker.DisplayFrame = DisplayFrame

		Options[Idx] = ColorPicker

		return self
	end

	function Funcs:AddKeyPicker(Idx, Info)
		local ParentObj = self
		local ToggleLabel = self.TextLabel
		local Container = self.Container

		assert(Info.Default, "AddKeyPicker: Missing default value.")

		local KeyPicker = {
			Value = Info.Default,
			Toggled = false,
			Mode = Info.Mode or "Toggle", 
			Type = "KeyPicker",
			Callback = Info.Callback or function(Value) end,
			ChangedCallback = Info.ChangedCallback or function(New) end,

			SyncToggleState = Info.SyncToggleState or false,
		}

		if KeyPicker.SyncToggleState then
			Info.Modes = { "Toggle" }
			Info.Mode = "Toggle"
		end

		local PickOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(0, 28, 0, 15),
			ZIndex = 6,
			Parent = ToggleLabel,
		})

		local PickInner = Library:Create("Frame", {
			BackgroundColor3 = Library.BackgroundColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 7,
			Parent = PickOuter,
		})

		Library:AddToRegistry(PickInner, {
			BackgroundColor3 = "BackgroundColor",
			BorderColor3 = "OutlineColor",
		})

		local DisplayLabel = Library:CreateLabel({
			Size = UDim2.new(1, 0, 1, 0),
			TextSize = 13,
			Text = Info.Default,
			TextWrapped = true,
			ZIndex = 8,
			Parent = PickInner,
		})

		local ModeSelectOuter = Library:Create("Frame", {
			BorderColor3 = Color3.new(0, 0, 0),
			Position = UDim2.fromOffset(
				ToggleLabel.AbsolutePosition.X + ToggleLabel.AbsoluteSize.X + 4,
				ToggleLabel.AbsolutePosition.Y + 1
			),
			Size = UDim2.new(0, 60, 0, 45 + 2),
			Visible = false,
			ZIndex = 14,
			Parent = ScreenGui,
		})

		ToggleLabel:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
			ModeSelectOuter.Position = UDim2.fromOffset(
				ToggleLabel.AbsolutePosition.X + ToggleLabel.AbsoluteSize.X + 4,
				ToggleLabel.AbsolutePosition.Y + 1
			)
		end)

		local ModeSelectInner = Library:Create("Frame", {
			BackgroundColor3 = Library.BackgroundColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 15,
			Parent = ModeSelectOuter,
		})

		Library:AddToRegistry(ModeSelectInner, {
			BackgroundColor3 = "BackgroundColor",
			BorderColor3 = "OutlineColor",
		})

		Library:Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = ModeSelectInner,
		})

		local ContainerLabel = Library:CreateLabel({
			TextXAlignment = Enum.TextXAlignment.Left,
			Size = UDim2.new(1, 0, 0, 18),
			TextSize = 13,
			Visible = false,
			ZIndex = 110,
			Parent = Library.KeybindContainer,
		}, true)

		local Modes = Info.Modes or { "Always", "Toggle", "Hold" }
		local ModeButtons = {}

		for Idx, Mode in next, Modes do
			local ModeButton = {}

			local Label = Library:CreateLabel({
				Active = false,
				Size = UDim2.new(1, 0, 0, 15),
				TextSize = 13,
				Text = Mode,
				ZIndex = 16,
				Parent = ModeSelectInner,
			})

			function ModeButton:Select()
				for _, Button in next, ModeButtons do
					Button:Deselect()
				end

				KeyPicker.Mode = Mode

				Label.TextColor3 = Library.AccentColor
				Library.RegistryMap[Label].Properties.TextColor3 = "AccentColor"

				ModeSelectOuter.Visible = false
			end

			function ModeButton:Deselect()
				KeyPicker.Mode = nil

				Label.TextColor3 = Library.FontColor
				Library.RegistryMap[Label].Properties.TextColor3 = "FontColor"
			end

			Label.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					ModeButton:Select()
					Library:AttemptSave()
				end
			end)

			if Mode == KeyPicker.Mode then
				ModeButton:Select()
			end

			ModeButtons[Mode] = ModeButton
		end

		function KeyPicker:Update()
			if Info.NoUI then
				return
			end

			local State = KeyPicker:GetState()

			ContainerLabel.Text = string.format("[%s] %s (%s)", KeyPicker.Value, Info.Text, KeyPicker.Mode)

			ContainerLabel.Visible = true
			ContainerLabel.TextColor3 = State and Library.AccentColor or Library.FontColor

			Library.RegistryMap[ContainerLabel].Properties.TextColor3 = State and "AccentColor" or "FontColor"

			local YSize = 0
			local XSize = 0

			for _, Label in next, Library.KeybindContainer:GetChildren() do
				if Label:IsA("TextLabel") and Label.Visible then
					YSize = YSize + 18
					if Label.TextBounds.X > XSize then
						XSize = Label.TextBounds.X
					end
				end
			end

			Library.KeybindFrame.Size = UDim2.new(0, math.max(XSize + 10, 210), 0, YSize + 23)
		end

		function KeyPicker:GetState()
			if KeyPicker.Mode == "Always" then
				return true
			elseif KeyPicker.Mode == "Hold" then
				if KeyPicker.Value == "None" then
					return false
				end

				local Key = KeyPicker.Value

				if Key == "MB1" or Key == "MB2" then
					return Key == "MB1" and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
						or Key == "MB2" and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
				else
					return InputService:IsKeyDown(Enum.KeyCode[KeyPicker.Value])
				end
			else
				return KeyPicker.Toggled
			end
		end

		function KeyPicker:SetValue(Data)
			local Key, Mode = Data[1], Data[2]
			DisplayLabel.Text = Key
			KeyPicker.Value = Key
			ModeButtons[Mode]:Select()
			KeyPicker:Update()
		end

		function KeyPicker:OnClick(Callback)
			KeyPicker.Clicked = Callback
		end

		function KeyPicker:OnChanged(Callback)
			KeyPicker.Changed = Callback
			Callback(KeyPicker.Value)
		end

		if ParentObj.Addons then
			table.insert(ParentObj.Addons, KeyPicker)
		end

		function KeyPicker:DoClick()
			if ParentObj.Type == "Toggle" and KeyPicker.SyncToggleState then
				ParentObj:SetValue(not ParentObj.Value)
			end

			Library:SafeCallback(KeyPicker.Callback, KeyPicker.Toggled)
			Library:SafeCallback(KeyPicker.Clicked, KeyPicker.Toggled)
		end

		local Picking = false

		PickOuter.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
				Picking = true

				DisplayLabel.Text = ""

				local Break
				local Text = ""

				task.spawn(function()
					while not Break do
						if Text == "..." then
							Text = ""
						end

						Text = Text .. "."
						DisplayLabel.Text = Text

						wait(0.4)
					end
				end)

				wait(0.2)

				local Event
				Event = InputService.InputBegan:Connect(function(Input)
					local Key

					if Input.UserInputType == Enum.UserInputType.Keyboard then
						Key = Input.KeyCode.Name
					elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Key = "MB1"
					elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
						Key = "MB2"
					end

					Break = true
					Picking = false

					DisplayLabel.Text = Key
					KeyPicker.Value = Key

					Library:SafeCallback(KeyPicker.ChangedCallback, Input.KeyCode or Input.UserInputType)
					Library:SafeCallback(KeyPicker.Changed, Input.KeyCode or Input.UserInputType)

					Library:AttemptSave()

					Event:Disconnect()
				end)
			elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and not Library:MouseIsOverOpenedFrame() then
				ModeSelectOuter.Visible = true
			end
		end)

		Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
			if not Picking then
				if KeyPicker.Mode == "Toggle" then
					local Key = KeyPicker.Value

					if Key == "MB1" or Key == "MB2" then
						if
							Key == "MB1" and Input.UserInputType == Enum.UserInputType.MouseButton1
							or Key == "MB2" and Input.UserInputType == Enum.UserInputType.MouseButton2
						then
							KeyPicker.Toggled = not KeyPicker.Toggled
							KeyPicker:DoClick()
						end
					elseif Input.UserInputType == Enum.UserInputType.Keyboard then
						if Input.KeyCode.Name == Key then
							KeyPicker.Toggled = not KeyPicker.Toggled
							KeyPicker:DoClick()
						end
					end
				end

				KeyPicker:Update()
			end

			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local AbsPos, AbsSize = ModeSelectOuter.AbsolutePosition, ModeSelectOuter.AbsoluteSize

				if
					Mouse.X < AbsPos.X
					or Mouse.X > AbsPos.X + AbsSize.X
					or Mouse.Y < (AbsPos.Y - 20 - 1)
					or Mouse.Y > AbsPos.Y + AbsSize.Y
				then
					ModeSelectOuter.Visible = false
				end
			end
		end))

		Library:GiveSignal(InputService.InputEnded:Connect(function(Input)
			if not Picking then
				KeyPicker:Update()
			end
		end))

		KeyPicker:Update()

		Options[Idx] = KeyPicker

		return self
	end

	BaseAddons.__index = Funcs
	BaseAddons.__namecall = function(Table, Key, ...)
		return Funcs[Key](...)
	end
end

local BaseGroupbox = {}

do
	local Funcs = {}

	function Funcs:AddBlank(Size)
		local Groupbox = self
		local Container = Groupbox.Container

		Library:Create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, Size),
			ZIndex = 1,
			Parent = Container,
		})
	end

	function Funcs:AddLabel(Text, DoesWrap)
		local Label = {}

		local Groupbox = self
		local Container = Groupbox.Container

		local TextLabel = Library:CreateLabel({
			Size = UDim2.new(1, -4, 0, 15),
			TextSize = 14,
			Text = Text,
			TextWrapped = DoesWrap or false,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 5,
			Parent = Container,
		})

		if DoesWrap then
			local Y = select(
				2,
				Library:GetTextBounds(Text, Library.Font, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge))
			)
			TextLabel.Size = UDim2.new(1, -4, 0, Y)
		else
			Library:Create("UIListLayout", {
				Padding = UDim.new(0, 4),
				FillDirection = Enum.FillDirection.Horizontal,
				HorizontalAlignment = Enum.HorizontalAlignment.Right,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = TextLabel,
			})
		end

		Label.TextLabel = TextLabel
		Label.Container = Container

		function Label:SetText(Text)
			TextLabel.Text = Text

			if DoesWrap then
				local Y = select(
					2,
					Library:GetTextBounds(Text, Library.Font, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge))
				)
				TextLabel.Size = UDim2.new(1, -4, 0, Y)
			end

			Groupbox:Resize()
		end

		if not DoesWrap then
			setmetatable(Label, BaseAddons)
		end

		Groupbox:AddBlank(5)
		Groupbox:Resize()

		return Label
	end

	function Funcs:AddButton(...)
		
		local Button = {}
		local function ProcessButtonParams(Class, Obj, ...)
			local Props = select(1, ...)
			if type(Props) == "table" then
				Obj.Text = Props.Text
				Obj.Func = Props.Func
				Obj.DoubleClick = Props.DoubleClick
				Obj.Tooltip = Props.Tooltip
			else
				Obj.Text = select(1, ...)
				Obj.Func = select(2, ...)
			end

			assert(type(Obj.Func) == "function", "AddButton: `Func` callback is missing.")
		end

		ProcessButtonParams("Button", Button, ...)

		local Groupbox = self
		local Container = Groupbox.Container

		local function CreateBaseButton(Button)
			local Outer = Library:Create("Frame", {
				BackgroundColor3 = Color3.new(0, 0, 0),
				BorderColor3 = Color3.new(0, 0, 0),
				Size = UDim2.new(1, -4, 0, 20),
				ZIndex = 5,
			})

			local Inner = Library:Create("Frame", {
				BackgroundColor3 = Library.MainColor,
				BorderColor3 = Library.OutlineColor,
				BorderMode = Enum.BorderMode.Inset,
				Size = UDim2.new(1, 0, 1, 0),
				ZIndex = 6,
				Parent = Outer,
			})

			local Label = Library:CreateLabel({
				Size = UDim2.new(1, 0, 1, 0),
				TextSize = 14,
				Text = Button.Text,
				ZIndex = 6,
				Parent = Inner,
			})

			Library:Create("UIGradient", {
				Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212)),
				}),
				Rotation = 90,
				Parent = Inner,
			})

			Library:AddToRegistry(Outer, {
				BorderColor3 = "Black",
			})

			Library:AddToRegistry(Inner, {
				BackgroundColor3 = "MainColor",
				BorderColor3 = "OutlineColor",
			})

			Library:OnHighlight(Outer, Outer, { BorderColor3 = "AccentColor" }, { BorderColor3 = "Black" })

			return Outer, Inner, Label
		end

		local function InitEvents(Button)
			local function WaitForEvent(event, timeout, validator)
				local bindable = Instance.new("BindableEvent")
				local connection = event:Once(function(...)
					if type(validator) == "function" and validator(...) then
						bindable:Fire(true)
					else
						bindable:Fire(false)
					end
				end)
				task.delay(timeout, function()
					connection:disconnect()
					bindable:Fire(false)
				end)
				return bindable.Event:Wait()
			end

			local function ValidateClick(Input)
				if Library:MouseIsOverOpenedFrame() then
					return false
				end

				if Input.UserInputType ~= Enum.UserInputType.MouseButton1 then
					return false
				end

				return true
			end

			Button.Outer.InputBegan:Connect(function(Input)
				if not ValidateClick(Input) then
					return
				end
				if Button.Locked then
					return
				end

				if Button.DoubleClick then
					Library:RemoveFromRegistry(Button.Label)
					Library:AddToRegistry(Button.Label, { TextColor3 = "AccentColor" })

					Button.Label.TextColor3 = Library.AccentColor
					Button.Label.Text = "Are you sure?"
					Button.Locked = true

					local clicked = WaitForEvent(Button.Outer.InputBegan, 0.5, ValidateClick)

					Library:RemoveFromRegistry(Button.Label)
					Library:AddToRegistry(Button.Label, { TextColor3 = "FontColor" })

					Button.Label.TextColor3 = Library.FontColor
					Button.Label.Text = Button.Text
					task.defer(rawset, Button, "Locked", false)

					if clicked then
						Library:SafeCallback(Button.Func)
					end

					return
				end

				Library:SafeCallback(Button.Func)
			end)
		end

		Button.Outer, Button.Inner, Button.Label = CreateBaseButton(Button)
		Button.Outer.Parent = Container

		InitEvents(Button)

		function Button:AddTooltip(tooltip)
			if type(tooltip) == "string" then
				Library:AddToolTip(tooltip, self.Outer)
			end
			return self
		end

		function Button:AddButton(...)
			local SubButton = {}

			ProcessButtonParams("SubButton", SubButton, ...)

			self.Outer.Size = UDim2.new(0.5, -2, 0, 20)

			SubButton.Outer, SubButton.Inner, SubButton.Label = CreateBaseButton(SubButton)

			SubButton.Outer.Position = UDim2.new(1, 3, 0, 0)
			SubButton.Outer.Size = UDim2.fromOffset(self.Outer.AbsoluteSize.X - 2, self.Outer.AbsoluteSize.Y)
			SubButton.Outer.Parent = self.Outer

			function SubButton:AddTooltip(tooltip)
				if type(tooltip) == "string" then
					Library:AddToolTip(tooltip, self.Outer)
				end
				return SubButton
			end

			if type(SubButton.Tooltip) == "string" then
				SubButton:AddTooltip(SubButton.Tooltip)
			end

			InitEvents(SubButton)
			return SubButton
		end

		if type(Button.Tooltip) == "string" then
			Button:AddTooltip(Button.Tooltip)
		end

		Groupbox:AddBlank(5)
		Groupbox:Resize()

		return Button
	end

	function Funcs:AddDivider()
		local Groupbox = self
		local Container = self.Container

		local Divider = {
			Type = "Divider",
		}

		Groupbox:AddBlank(2)
		local DividerOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(1, -4, 0, 5),
			ZIndex = 5,
			Parent = Container,
		})

		local DividerInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 6,
			Parent = DividerOuter,
		})

		Library:AddToRegistry(DividerOuter, {
			BorderColor3 = "Black",
		})

		Library:AddToRegistry(DividerInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		Groupbox:AddBlank(9)
		Groupbox:Resize()
	end

	function Funcs:AddInput(Idx, Info)
		assert(Info.Text, "AddInput: Missing `Text` string.")

		local Textbox = {
			Value = Info.Default or "",
			Numeric = Info.Numeric or false,
			Finished = Info.Finished or false,
			Type = "Input",
			Callback = Info.Callback or function(Value) end,
		}

		local Groupbox = self
		local Container = Groupbox.Container

		local InputLabel = Library:CreateLabel({
			Size = UDim2.new(1, 0, 0, 15),
			TextSize = 14,
			Text = Info.Text,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 5,
			Parent = Container,
		})

		Groupbox:AddBlank(1)

		local TextBoxOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(1, -4, 0, 20),
			ZIndex = 5,
			Parent = Container,
		})

		local TextBoxInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 6,
			Parent = TextBoxOuter,
		})

		Library:AddToRegistry(TextBoxInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		Library:OnHighlight(TextBoxOuter, TextBoxOuter, { BorderColor3 = "AccentColor" }, { BorderColor3 = "Black" })

		if type(Info.Tooltip) == "string" then
			Library:AddToolTip(Info.Tooltip, TextBoxOuter)
		end

		Library:Create("UIGradient", {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212)),
			}),
			Rotation = 90,
			Parent = TextBoxInner,
		})

		local Container = Library:Create("Frame", {
			BackgroundTransparency = 1,
			ClipsDescendants = true,

			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -5, 1, 0),

			ZIndex = 7,
			Parent = TextBoxInner,
		})

		local Box = Library:Create("TextBox", {
			BackgroundTransparency = 1,

			Position = UDim2.fromOffset(0, 0),
			Size = UDim2.fromScale(5, 1),

			Font = Library.Font,
			PlaceholderColor3 = Color3.fromRGB(190, 190, 190),
			PlaceholderText = Info.Placeholder or "",

			Text = Info.Default or "",
			TextColor3 = Library.FontColor,
			TextSize = 14,
			TextStrokeTransparency = 0,
			TextXAlignment = Enum.TextXAlignment.Left,

			ZIndex = 7,
			Parent = Container,
		})

		Library:ApplyTextStroke(Box)

		function Textbox:SetValue(Text)
			if Info.MaxLength and #Text > Info.MaxLength then
				Text = Text:sub(1, Info.MaxLength)
			end

			if Textbox.Numeric then
				if (not tonumber(Text)) and Text:len() > 0 then
					Text = Textbox.Value
				end
			end

			Textbox.Value = Text
			Box.Text = Text

			Library:SafeCallback(Textbox.Callback, Textbox.Value)
			Library:SafeCallback(Textbox.Changed, Textbox.Value)
		end

		if Textbox.Finished then
			Box.FocusLost:Connect(function(enter)
				if not enter then
					return
				end

				Textbox:SetValue(Box.Text)
				Library:AttemptSave()
			end)
		else
			Box:GetPropertyChangedSignal("Text"):Connect(function()
				Textbox:SetValue(Box.Text)
				Library:AttemptSave()
			end)
		end

		
		

		local function Update()
			local PADDING = 2
			local reveal = Container.AbsoluteSize.X

			if not Box:IsFocused() or Box.TextBounds.X <= reveal - 2 * PADDING then
				
				Box.Position = UDim2.new(0, PADDING, 0, 0)
			else
				
				local cursor = Box.CursorPosition
				if cursor ~= -1 then
					
					local subtext = string.sub(Box.Text, 1, cursor - 1)
					local width =
						TextService:GetTextSize(subtext, Box.TextSize, Box.Font, Vector2.new(math.huge, math.huge)).X

					
					local currentCursorPos = Box.Position.X.Offset + width

					
					if currentCursorPos < PADDING then
						Box.Position = UDim2.fromOffset(PADDING - width, 0)
					elseif currentCursorPos > reveal - PADDING - 1 then
						Box.Position = UDim2.fromOffset(reveal - width - PADDING - 1, 0)
					end
				end
			end
		end

		task.spawn(Update)

		Box:GetPropertyChangedSignal("Text"):Connect(Update)
		Box:GetPropertyChangedSignal("CursorPosition"):Connect(Update)
		Box.FocusLost:Connect(Update)
		Box.Focused:Connect(Update)

		Library:AddToRegistry(Box, {
			TextColor3 = "FontColor",
		})

		function Textbox:OnChanged(Func)
			Textbox.Changed = Func
			Func(Textbox.Value)
		end

		Groupbox:AddBlank(5)
		Groupbox:Resize()

		Options[Idx] = Textbox

		return Textbox
	end

	function Funcs:AddToggle(Idx, Info)
		assert(Info.Text, "AddInput: Missing `Text` string.")

		local Toggle = {
			Value = Info.Default or false,
			Type = "Toggle",

			Callback = Info.Callback or function(Value) end,
			Addons = {},
			Risky = Info.Risky,
		}

		local Groupbox = self
		local Container = Groupbox.Container

		local ToggleOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(0, 13, 0, 13),
			ZIndex = 5,
			Parent = Container,
		})

		Library:AddToRegistry(ToggleOuter, {
			BorderColor3 = "Black",
		})

		local ToggleInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 6,
			Parent = ToggleOuter,
		})

		Library:AddToRegistry(ToggleInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		local ToggleLabel = Library:CreateLabel({
			Size = UDim2.new(0, 216, 1, 0),
			Position = UDim2.new(1, 6, 0, 0),
			TextSize = 14,
			Text = Info.Text,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 6,
			Parent = ToggleInner,
		})

		Library:Create("UIListLayout", {
			Padding = UDim.new(0, 4),
			FillDirection = Enum.FillDirection.Horizontal,
			HorizontalAlignment = Enum.HorizontalAlignment.Right,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = ToggleLabel,
		})

		local ToggleRegion = Library:Create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 170, 1, 0),
			ZIndex = 8,
			Parent = ToggleOuter,
		})

		Library:OnHighlight(ToggleRegion, ToggleOuter, { BorderColor3 = "AccentColor" }, { BorderColor3 = "Black" })

		function Toggle:UpdateColors()
			Toggle:Display()
		end

		if type(Info.Tooltip) == "string" then
			Library:AddToolTip(Info.Tooltip, ToggleRegion)
		end

		function Toggle:Display()
			ToggleInner.BackgroundColor3 = Toggle.Value and Library.AccentColor or Library.MainColor
			ToggleInner.BorderColor3 = Toggle.Value and Library.AccentColorDark or Library.OutlineColor

			Library.RegistryMap[ToggleInner].Properties.BackgroundColor3 = Toggle.Value and "AccentColor" or "MainColor"
			Library.RegistryMap[ToggleInner].Properties.BorderColor3 = Toggle.Value and "AccentColorDark"
				or "OutlineColor"
		end

		function Toggle:OnChanged(Func)
			Toggle.Changed = Func
			Func(Toggle.Value)
		end

		function Toggle:SetValue(Bool)
			Bool = not not Bool

			Toggle.Value = Bool
			Toggle:Display()

			for _, Addon in next, Toggle.Addons do
				if Addon.Type == "KeyPicker" and Addon.SyncToggleState then
					Addon.Toggled = Bool
					Addon:Update()
				end
			end

			Library:SafeCallback(Toggle.Callback, Toggle.Value)
			Library:SafeCallback(Toggle.Changed, Toggle.Value)
			Library:UpdateDependencyBoxes()
		end

		ToggleRegion.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
				Toggle:SetValue(not Toggle.Value) 
				Library:AttemptSave()
			end
		end)

		if Toggle.Risky then
			Library:RemoveFromRegistry(ToggleLabel)
			ToggleLabel.TextColor3 = Library.RiskColor
			Library:AddToRegistry(ToggleLabel, { TextColor3 = "RiskColor" })
		end

		Toggle:Display()
		Groupbox:AddBlank(Info.BlankSize or 5 + 2)
		Groupbox:Resize()

		Toggle.TextLabel = ToggleLabel
		Toggle.Container = Container
		setmetatable(Toggle, BaseAddons)

		Toggles[Idx] = Toggle

		Library:UpdateDependencyBoxes()

		return Toggle
	end

	function Funcs:AddSlider(Idx, Info)
		assert(Info.Default, "AddSlider: Missing default value.")
		assert(Info.Text, "AddSlider: Missing slider text.")
		assert(Info.Min, "AddSlider: Missing minimum value.")
		assert(Info.Max, "AddSlider: Missing maximum value.")
		assert(Info.Rounding, "AddSlider: Missing rounding value.")

		local Slider = {
			Value = Info.Default,
			Min = Info.Min,
			Max = Info.Max,
			Rounding = Info.Rounding,
			MaxSize = 232,
			Type = "Slider",
			Callback = Info.Callback or function(Value) end,
		}

		local Groupbox = self
		local Container = Groupbox.Container

		if not Info.Compact then
			Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 10),
				TextSize = 14,
				Text = Info.Text,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Bottom,
				ZIndex = 5,
				Parent = Container,
			})

			Groupbox:AddBlank(3)
		end

		local SliderOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(1, -4, 0, 13),
			ZIndex = 5,
			Parent = Container,
		})

		Library:AddToRegistry(SliderOuter, {
			BorderColor3 = "Black",
		})

		local SliderInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 6,
			Parent = SliderOuter,
		})

		Library:AddToRegistry(SliderInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		local Fill = Library:Create("Frame", {
			BackgroundColor3 = Library.AccentColor,
			BorderColor3 = Library.AccentColorDark,
			Size = UDim2.new(0, 0, 1, 0),
			ZIndex = 7,
			Parent = SliderInner,
		})

		Library:AddToRegistry(Fill, {
			BackgroundColor3 = "AccentColor",
			BorderColor3 = "AccentColorDark",
		})

		local HideBorderRight = Library:Create("Frame", {
			BackgroundColor3 = Library.AccentColor,
			BorderSizePixel = 0,
			Position = UDim2.new(1, 0, 0, 0),
			Size = UDim2.new(0, 1, 1, 0),
			ZIndex = 8,
			Parent = Fill,
		})

		Library:AddToRegistry(HideBorderRight, {
			BackgroundColor3 = "AccentColor",
		})

		local DisplayLabel = Library:CreateLabel({
			Size = UDim2.new(1, 0, 1, 0),
			TextSize = 14,
			Text = "Infinite",
			ZIndex = 9,
			Parent = SliderInner,
		})

		Library:OnHighlight(SliderOuter, SliderOuter, { BorderColor3 = "AccentColor" }, { BorderColor3 = "Black" })

		if type(Info.Tooltip) == "string" then
			Library:AddToolTip(Info.Tooltip, SliderOuter)
		end

		function Slider:UpdateColors()
			Fill.BackgroundColor3 = Library.AccentColor
			Fill.BorderColor3 = Library.AccentColorDark
		end

		function Slider:Display()
			local Suffix = Info.Suffix or ""

			if Info.Compact then
				DisplayLabel.Text = Info.Text .. ": " .. Slider.Value .. Suffix
			elseif Info.HideMax then
				DisplayLabel.Text = string.format("%s", Slider.Value .. Suffix)
			else
				DisplayLabel.Text = string.format("%s/%s", Slider.Value .. Suffix, Slider.Max .. Suffix)
			end

			local X = math.ceil(Library:MapValue(Slider.Value, Slider.Min, Slider.Max, 0, Slider.MaxSize))
			Fill.Size = UDim2.new(0, X, 1, 0)

			HideBorderRight.Visible = not (X == Slider.MaxSize or X == 0)
		end

		function Slider:OnChanged(Func)
			Slider.Changed = Func
			Func(Slider.Value)
		end

		local function Round(Value)
			if Slider.Rounding == 0 then
				return math.floor(Value)
			end

			return tonumber(string.format("%." .. Slider.Rounding .. "f", Value))
		end

		function Slider:GetValueFromXOffset(X)
			return Round(Library:MapValue(X, 0, Slider.MaxSize, Slider.Min, Slider.Max))
		end

		function Slider:SetValue(Str)
			local Num = tonumber(Str)

			if not Num then
				return
			end

			Num = math.clamp(Num, Slider.Min, Slider.Max)

			Slider.Value = Num
			Slider:Display()

			Library:SafeCallback(Slider.Callback, Slider.Value)
			Library:SafeCallback(Slider.Changed, Slider.Value)
		end

		SliderInner.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
				local mPos = Mouse.X
				local gPos = Fill.Size.X.Offset
				local Diff = mPos - (Fill.AbsolutePosition.X + gPos)

				while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
					local nMPos = Mouse.X
					local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, Slider.MaxSize)

					local nValue = Slider:GetValueFromXOffset(nX)
					local OldValue = Slider.Value
					Slider.Value = nValue

					Slider:Display()

					if nValue ~= OldValue then
						Library:SafeCallback(Slider.Callback, Slider.Value)
						Library:SafeCallback(Slider.Changed, Slider.Value)
					end

					RenderStepped:Wait()
				end

				Library:AttemptSave()
			end
		end)

		Slider:Display()
		Groupbox:AddBlank(Info.BlankSize or 6)
		Groupbox:Resize()

		Options[Idx] = Slider

		return Slider
	end

	function Funcs:AddDropdown(Idx, Info)
		if Info.SpecialType == "Player" then
			Info.Values = GetPlayersString()
			Info.AllowNull = true
		elseif Info.SpecialType == "Team" then
			Info.Values = GetTeamsString()
			Info.AllowNull = true
		end

		assert(Info.Values, "AddDropdown: Missing dropdown value list.")
		assert(
			Info.AllowNull or Info.Default,
			"AddDropdown: Missing default value. Pass `AllowNull` as true if this was intentional."
		)

		if not Info.Text then
			Info.Compact = true
		end

		local Dropdown = {
			Values = Info.Values,
			Value = Info.Multi and {},
			Multi = Info.Multi,
			Type = "Dropdown",
			SpecialType = Info.SpecialType, 
			Callback = Info.Callback or function(Value) end,
		}

		local Groupbox = self
		local Container = Groupbox.Container

		local RelativeOffset = 0

		if not Info.Compact then
			local DropdownLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 10),
				TextSize = 14,
				Text = Info.Text,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Bottom,
				ZIndex = 5,
				Parent = Container,
			})

			Groupbox:AddBlank(3)
		end

		for _, Element in next, Container:GetChildren() do
			if not Element:IsA("UIListLayout") then
				RelativeOffset = RelativeOffset + Element.Size.Y.Offset
			end
		end

		local DropdownOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			Size = UDim2.new(1, -4, 0, 20),
			ZIndex = 5,
			Parent = Container,
		})

		Library:AddToRegistry(DropdownOuter, {
			BorderColor3 = "Black",
		})

		local DropdownInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 6,
			Parent = DropdownOuter,
		})

		Library:AddToRegistry(DropdownInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		Library:Create("UIGradient", {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212)),
			}),
			Rotation = 90,
			Parent = DropdownInner,
		})

		local DropdownArrow = Library:Create("ImageLabel", {
			AnchorPoint = Vector2.new(0, 0.5),
			BackgroundTransparency = 1,
			Position = UDim2.new(1, -16, 0.5, 0),
			Size = UDim2.new(0, 12, 0, 12),
			Image = "http://www.roblox.com/asset/?id=6282522798",
			ZIndex = 8,
			Parent = DropdownInner,
		})

		local ItemList = Library:CreateLabel({
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -5, 1, 0),
			TextSize = 14,
			Text = "--",
			TextXAlignment = Enum.TextXAlignment.Left,
			TextWrapped = true,
			ZIndex = 7,
			Parent = DropdownInner,
		})

		Library:OnHighlight(DropdownOuter, DropdownOuter, { BorderColor3 = "AccentColor" }, { BorderColor3 = "Black" })

		if type(Info.Tooltip) == "string" then
			Library:AddToolTip(Info.Tooltip, DropdownOuter)
		end

		local MAX_DROPDOWN_ITEMS = 8

		local ListOuter = Library:Create("Frame", {
			BackgroundColor3 = Color3.new(0, 0, 0),
			BorderColor3 = Color3.new(0, 0, 0),
			ZIndex = 20,
			Visible = false,
			Parent = ScreenGui,
		})

		local function RecalculateListPosition()
			ListOuter.Position = UDim2.fromOffset(
				DropdownOuter.AbsolutePosition.X,
				DropdownOuter.AbsolutePosition.Y + DropdownOuter.Size.Y.Offset + 1
			)
		end

		local function RecalculateListSize(YSize)
			ListOuter.Size = UDim2.fromOffset(DropdownOuter.AbsoluteSize.X, YSize or (MAX_DROPDOWN_ITEMS * 20 + 2))
		end

		RecalculateListPosition()
		RecalculateListSize()

		DropdownOuter:GetPropertyChangedSignal("AbsolutePosition"):Connect(RecalculateListPosition)

		local ListInner = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderColor3 = Library.OutlineColor,
			BorderMode = Enum.BorderMode.Inset,
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 21,
			Parent = ListOuter,
		})

		Library:AddToRegistry(ListInner, {
			BackgroundColor3 = "MainColor",
			BorderColor3 = "OutlineColor",
		})

		local Scrolling = Library:Create("ScrollingFrame", {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			ZIndex = 21,
			Parent = ListInner,

			TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
			BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",

			ScrollBarThickness = 3,
			ScrollBarImageColor3 = Library.AccentColor,
		})

		Library:AddToRegistry(Scrolling, {
			ScrollBarImageColor3 = "AccentColor",
		})

		Library:Create("UIListLayout", {
			Padding = UDim.new(0, 0),
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = Scrolling,
		})

		function Dropdown:Display()
			local Values = Dropdown.Values
			local Str = ""

			if Info.Multi then
				for Idx, Value in next, Values do
					if Dropdown.Value[Value] then
						Str = Str .. Value .. ", "
					end
				end

				Str = Str:sub(1, #Str - 2)
			else
				Str = Dropdown.Value or ""
			end

			ItemList.Text = (Str == "" and "--" or Str)
		end

		function Dropdown:GetActiveValues()
			if Info.Multi then
				local T = {}

				for Value, Bool in next, Dropdown.Value do
					table.insert(T, Value)
				end

				return T
			else
				return Dropdown.Value and 1 or 0
			end
		end

		function Dropdown:BuildDropdownList()
			local Values = Dropdown.Values
			local Buttons = {}

			for _, Element in next, Scrolling:GetChildren() do
				if not Element:IsA("UIListLayout") then
					Element:Destroy()
				end
			end

			local Count = 0

			for Idx, Value in next, Values do
				local Table = {}

				Count = Count + 1

				local Button = Library:Create("Frame", {
					BackgroundColor3 = Library.MainColor,
					BorderColor3 = Library.OutlineColor,
					BorderMode = Enum.BorderMode.Middle,
					Size = UDim2.new(1, -1, 0, 20),
					ZIndex = 23,
					Active = true,
					Parent = Scrolling,
				})

				Library:AddToRegistry(Button, {
					BackgroundColor3 = "MainColor",
					BorderColor3 = "OutlineColor",
				})

				local ButtonLabel = Library:CreateLabel({
					Active = false,
					Size = UDim2.new(1, -6, 1, 0),
					Position = UDim2.new(0, 6, 0, 0),
					TextSize = 14,
					Text = Value,
					TextXAlignment = Enum.TextXAlignment.Left,
					ZIndex = 25,
					Parent = Button,
				})

				Library:OnHighlight(
					Button,
					Button,
					{ BorderColor3 = "AccentColor", ZIndex = 24 },
					{ BorderColor3 = "OutlineColor", ZIndex = 23 }
				)

				local Selected

				if Info.Multi then
					Selected = Dropdown.Value[Value]
				else
					Selected = Dropdown.Value == Value
				end

				function Table:UpdateButton()
					if Info.Multi then
						Selected = Dropdown.Value[Value]
					else
						Selected = Dropdown.Value == Value
					end

					ButtonLabel.TextColor3 = Selected and Library.AccentColor or Library.FontColor
					Library.RegistryMap[ButtonLabel].Properties.TextColor3 = Selected and "AccentColor" or "FontColor"
				end

				ButtonLabel.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						local Try = not Selected

						if Dropdown:GetActiveValues() == 1 and not Try and not Info.AllowNull then
						else
							if Info.Multi then
								Selected = Try

								if Selected then
									Dropdown.Value[Value] = true
								else
									Dropdown.Value[Value] = nil
								end
							else
								Selected = Try

								if Selected then
									Dropdown.Value = Value
								else
									Dropdown.Value = nil
								end

								for _, OtherButton in next, Buttons do
									OtherButton:UpdateButton()
								end
							end

							Table:UpdateButton()
							Dropdown:Display()

							Library:SafeCallback(Dropdown.Callback, Dropdown.Value)
							Library:SafeCallback(Dropdown.Changed, Dropdown.Value)

							Library:AttemptSave()
						end
					end
				end)

				Table:UpdateButton()
				Dropdown:Display()

				Buttons[Button] = Table
			end

			Scrolling.CanvasSize = UDim2.fromOffset(0, (Count * 20) + 1)

			local Y = math.clamp(Count * 20, 0, MAX_DROPDOWN_ITEMS * 20) + 1
			RecalculateListSize(Y)
		end

		function Dropdown:SetValues(NewValues)
			if NewValues then
				Dropdown.Values = NewValues
			end

			Dropdown:BuildDropdownList()
		end

		function Dropdown:OpenDropdown()
			ListOuter.Visible = true
			Library.OpenedFrames[ListOuter] = true
			DropdownArrow.Rotation = 180
		end

		function Dropdown:CloseDropdown()
			ListOuter.Visible = false
			Library.OpenedFrames[ListOuter] = nil
			DropdownArrow.Rotation = 0
		end

		function Dropdown:OnChanged(Func)
			Dropdown.Changed = Func
			Func(Dropdown.Value)
		end

		function Dropdown:SetValue(Val)
			if Dropdown.Multi then
				local nTable = {}

				for Value, Bool in next, Val do
					if table.find(Dropdown.Values, Value) then
						nTable[Value] = true
					end
				end

				Dropdown.Value = nTable
			else
				if not Val then
					Dropdown.Value = nil
				elseif table.find(Dropdown.Values, Val) then
					Dropdown.Value = Val
				end
			end

			Dropdown:BuildDropdownList()

			Library:SafeCallback(Dropdown.Callback, Dropdown.Value)
			Library:SafeCallback(Dropdown.Changed, Dropdown.Value)
		end

		DropdownOuter.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
				if ListOuter.Visible then
					Dropdown:CloseDropdown()
				else
					Dropdown:OpenDropdown()
				end
			end
		end)

		InputService.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local AbsPos, AbsSize = ListOuter.AbsolutePosition, ListOuter.AbsoluteSize

				if
					Mouse.X < AbsPos.X
					or Mouse.X > AbsPos.X + AbsSize.X
					or Mouse.Y < (AbsPos.Y - 20 - 1)
					or Mouse.Y > AbsPos.Y + AbsSize.Y
				then
					Dropdown:CloseDropdown()
				end
			end
		end)

		Dropdown:BuildDropdownList()
		Dropdown:Display()

		local Defaults = {}

		if type(Info.Default) == "string" then
			local Idx = table.find(Dropdown.Values, Info.Default)
			if Idx then
				table.insert(Defaults, Idx)
			end
		elseif type(Info.Default) == "table" then
			for _, Value in next, Info.Default do
				local Idx = table.find(Dropdown.Values, Value)
				if Idx then
					table.insert(Defaults, Idx)
				end
			end
		elseif type(Info.Default) == "number" and Dropdown.Values[Info.Default] ~= nil then
			table.insert(Defaults, Info.Default)
		end

		if next(Defaults) then
			for i = 1, #Defaults do
				local Index = Defaults[i]
				if Info.Multi then
					Dropdown.Value[Dropdown.Values[Index]] = true
				else
					Dropdown.Value = Dropdown.Values[Index]
				end

				if not Info.Multi then
					break
				end
			end

			Dropdown:BuildDropdownList()
			Dropdown:Display()
		end

		Groupbox:AddBlank(Info.BlankSize or 5)
		Groupbox:Resize()

		Options[Idx] = Dropdown

		return Dropdown
	end

	function Funcs:AddDependencyBox()
		local Depbox = {
			Dependencies = {},
		}

		local Groupbox = self
		local Container = Groupbox.Container

		local Holder = Library:Create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 0),
			Visible = false,
			Parent = Container,
		})

		local Frame = Library:Create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Visible = true,
			Parent = Holder,
		})

		local Layout = Library:Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = Frame,
		})

		function Depbox:Resize()
			Holder.Size = UDim2.new(1, 0, 0, Layout.AbsoluteContentSize.Y)
			Groupbox:Resize()
		end

		Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			Depbox:Resize()
		end)

		Holder:GetPropertyChangedSignal("Visible"):Connect(function()
			Depbox:Resize()
		end)

		function Depbox:Update()
			for _, Dependency in next, Depbox.Dependencies do
				local Elem = Dependency[1]
				local Value = Dependency[2]

				if Elem.Type == "Toggle" and Elem.Value ~= Value then
					Holder.Visible = false
					Depbox:Resize()
					return
				end
			end

			Holder.Visible = true
			Depbox:Resize()
		end

		function Depbox:SetupDependencies(Dependencies)
			for _, Dependency in next, Dependencies do
				assert(type(Dependency) == "table", "SetupDependencies: Dependency is not of type `table`.")
				assert(Dependency[1], "SetupDependencies: Dependency is missing element argument.")
				assert(Dependency[2] ~= nil, "SetupDependencies: Dependency is missing value argument.")
			end

			Depbox.Dependencies = Dependencies
			Depbox:Update()
		end

		Depbox.Container = Frame

		setmetatable(Depbox, BaseGroupbox)

		table.insert(Library.DependencyBoxes, Depbox)

		return Depbox
	end

	BaseGroupbox.__index = Funcs
	BaseGroupbox.__namecall = function(Table, Key, ...)
		return Funcs[Key](...)
	end
end


do
	Library.NotificationArea = Library:Create("Frame", {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 0, 0, 40),
		Size = UDim2.new(0, 300, 0, 200),
		ZIndex = 100,
		Parent = ScreenGui,
	})

	Library:Create("UIListLayout", {
		Padding = UDim.new(0, 4),
		FillDirection = Enum.FillDirection.Vertical,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = Library.NotificationArea,
	})

	local WatermarkOuter = Library:Create("Frame", {
		BorderColor3 = Color3.new(0, 0, 0),
		Position = UDim2.new(0, 100, 0, -25),
		Size = UDim2.new(0, 213, 0, 20),
		ZIndex = 200,
		Visible = false,
		Parent = ScreenGui,
	})

	local WatermarkInner = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.AccentColor,
		BorderMode = Enum.BorderMode.Inset,
		Size = UDim2.new(1, 0, 1, 0),
		ZIndex = 201,
		Parent = WatermarkOuter,
	})

	Library:AddToRegistry(WatermarkInner, {
		BorderColor3 = "AccentColor",
	})

	local InnerFrame = Library:Create("Frame", {
		BackgroundColor3 = Color3.new(1, 1, 1),
		BorderSizePixel = 0,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		ZIndex = 202,
		Parent = WatermarkInner,
	})

	local Gradient = Library:Create("UIGradient", {
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
			ColorSequenceKeypoint.new(1, Library.MainColor),
		}),
		Rotation = -90,
		Parent = InnerFrame,
	})

	Library:AddToRegistry(Gradient, {
		Color = function()
			return ColorSequence.new({
				ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
				ColorSequenceKeypoint.new(1, Library.MainColor),
			})
		end,
	})

	local WatermarkLabel = Library:CreateLabel({
		Position = UDim2.new(0, 5, 0, 0),
		Size = UDim2.new(1, -4, 1, 0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 203,
		Parent = InnerFrame,
	})

	Library.Watermark = WatermarkOuter
	Library.WatermarkText = WatermarkLabel
	Library:MakeDraggable(Library.Watermark)

	local KeybindOuter = Library:Create("Frame", {
		AnchorPoint = Vector2.new(0, 0.5),
		BorderColor3 = Color3.new(0, 0, 0),
		Position = UDim2.new(0, 10, 0.5, 0),
		Size = UDim2.new(0, 210, 0, 20),
		Visible = false,
		ZIndex = 100,
		Parent = ScreenGui,
	})

	local KeybindInner = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.OutlineColor,
		BorderMode = Enum.BorderMode.Inset,
		Size = UDim2.new(1, 0, 1, 0),
		ZIndex = 101,
		Parent = KeybindOuter,
	})

	Library:AddToRegistry(KeybindInner, {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "OutlineColor",
	}, true)

	local ColorFrame = Library:Create("Frame", {
		BackgroundColor3 = Library.AccentColor,
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 0, 2),
		ZIndex = 102,
		Parent = KeybindInner,
	})

	Library:AddToRegistry(ColorFrame, {
		BackgroundColor3 = "AccentColor",
	}, true)

	local KeybindLabel = Library:CreateLabel({
		Size = UDim2.new(1, 0, 0, 20),
		Position = UDim2.fromOffset(5, 2),
		TextXAlignment = Enum.TextXAlignment.Left,

		Text = "Keybinds",
		ZIndex = 104,
		Parent = KeybindInner,
	})

	local KeybindContainer = Library:Create("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 1, -20),
		Position = UDim2.new(0, 0, 0, 20),
		ZIndex = 1,
		Parent = KeybindInner,
	})

	Library:Create("UIListLayout", {
		FillDirection = Enum.FillDirection.Vertical,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = KeybindContainer,
	})

	Library:Create("UIPadding", {
		PaddingLeft = UDim.new(0, 5),
		Parent = KeybindContainer,
	})

	Library.KeybindFrame = KeybindOuter
	Library.KeybindContainer = KeybindContainer
	Library:MakeDraggable(KeybindOuter)
end

function Library:SetWatermarkVisibility(Bool)
	Library.Watermark.Visible = Bool
end

function Library:SetWatermark(Text)
	local X, Y = Library:GetTextBounds(Text, Library.Font, 14)
	Library.Watermark.Size = UDim2.new(0, X + 15, 0, (Y * 1.5) + 3)
	Library:SetWatermarkVisibility(true)

	Library.WatermarkText.Text = Text
end

function Library:Notify(Text, Time)
	local XSize, YSize = Library:GetTextBounds(Text, Library.Font, 14)

	YSize = YSize + 7

	local NotifyOuter = Library:Create("Frame", {
		BorderColor3 = Color3.new(0, 0, 0),
		Position = UDim2.new(0, 100, 0, 10),
		Size = UDim2.new(0, 0, 0, YSize),
		ClipsDescendants = true,
		ZIndex = 100,
		Parent = Library.NotificationArea,
	})

	local NotifyInner = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.OutlineColor,
		BorderMode = Enum.BorderMode.Inset,
		Size = UDim2.new(1, 0, 1, 0),
		ZIndex = 101,
		Parent = NotifyOuter,
	})

	Library:AddToRegistry(NotifyInner, {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "OutlineColor",
	}, true)

	local InnerFrame = Library:Create("Frame", {
		BackgroundColor3 = Color3.new(1, 1, 1),
		BorderSizePixel = 0,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		ZIndex = 102,
		Parent = NotifyInner,
	})

	local Gradient = Library:Create("UIGradient", {
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
			ColorSequenceKeypoint.new(1, Library.MainColor),
		}),
		Rotation = -90,
		Parent = InnerFrame,
	})

	Library:AddToRegistry(Gradient, {
		Color = function()
			return ColorSequence.new({
				ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
				ColorSequenceKeypoint.new(1, Library.MainColor),
			})
		end,
	})

	local NotifyLabel = Library:CreateLabel({
		Position = UDim2.new(0, 4, 0, 0),
		Size = UDim2.new(1, -4, 1, 0),
		Text = Text,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextSize = 14,
		ZIndex = 103,
		Parent = InnerFrame,
	})

	local LeftColor = Library:Create("Frame", {
		BackgroundColor3 = Library.AccentColor,
		BorderSizePixel = 0,
		Position = UDim2.new(0, -1, 0, -1),
		Size = UDim2.new(0, 3, 1, 2),
		ZIndex = 104,
		Parent = NotifyOuter,
	})

	Library:AddToRegistry(LeftColor, {
		BackgroundColor3 = "AccentColor",
	}, true)

	pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, XSize + 8 + 4, 0, YSize), "Out", "Quad", 0.4, true)

	task.spawn(function()
		wait(Time or 5)

		pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, 0, 0, YSize), "Out", "Quad", 0.4, true)

		wait(0.4)

		NotifyOuter:Destroy()
	end)
end

function Library:CreateWindow(...)
	local Arguments = { ... }
	local Config = { AnchorPoint = Vector2.zero }

	if type(...) == "table" then
		Config = ...
	else
		Config.Title = Arguments[1]
		Config.AutoShow = Arguments[2] or false
	end

	if type(Config.Title) ~= "string" then
		Config.Title = "No title"
	end
	if type(Config.TabPadding) ~= "number" then
		Config.TabPadding = 0
	end
	if type(Config.MenuFadeTime) ~= "number" then
		Config.MenuFadeTime = 0.2
	end

	if typeof(Config.Position) ~= "UDim2" then
		Config.Position = UDim2.fromOffset(175, 50)
	end
	if typeof(Config.Size) ~= "UDim2" then
		Config.Size = UDim2.fromOffset(550, 600)
	end

	if Config.Center then
		Config.AnchorPoint = Vector2.new(0.5, 0.5)
		Config.Position = UDim2.fromScale(0.5, 0.5)
	end

	local Window = {
		Tabs = {},
	}

	local Outer = Library:Create("Frame", {
		AnchorPoint = Config.AnchorPoint,
		BackgroundColor3 = Color3.new(0, 0, 0),
		BorderSizePixel = 0,
		Position = Config.Position,
		Size = Config.Size,
		Visible = false,
		ZIndex = 1,
		Parent = ScreenGui,
	})

	Library:MakeDraggable(Outer, 25)

	local Inner = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.AccentColor,
		BorderMode = Enum.BorderMode.Inset,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		ZIndex = 1,
		Parent = Outer,
	})

	Library:AddToRegistry(Inner, {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "AccentColor",
	})

	local WindowLabel = Library:CreateLabel({
		Position = UDim2.new(0, 7, 0, 0),
		Size = UDim2.new(0, 0, 0, 25),
		Text = Config.Title or "",
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 1,
		Parent = Inner,
	})

	local MainSectionOuter = Library:Create("Frame", {
		BackgroundColor3 = Library.BackgroundColor,
		BorderColor3 = Library.OutlineColor,
		Position = UDim2.new(0, 8, 0, 25),
		Size = UDim2.new(1, -16, 1, -33),
		ZIndex = 1,
		Parent = Inner,
	})

	Library:AddToRegistry(MainSectionOuter, {
		BackgroundColor3 = "BackgroundColor",
		BorderColor3 = "OutlineColor",
	})

	local MainSectionInner = Library:Create("Frame", {
		BackgroundColor3 = Library.BackgroundColor,
		BorderColor3 = Color3.new(0, 0, 0),
		BorderMode = Enum.BorderMode.Inset,
		Position = UDim2.new(0, 0, 0, 0),
		Size = UDim2.new(1, 0, 1, 0),
		ZIndex = 1,
		Parent = MainSectionOuter,
	})

	Library:AddToRegistry(MainSectionInner, {
		BackgroundColor3 = "BackgroundColor",
	})

	local TabArea = Library:Create("Frame", {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 8, 0, 8),
		Size = UDim2.new(1, -16, 0, 21),
		ZIndex = 1,
		Parent = MainSectionInner,
	})

	local TabListLayout = Library:Create("UIListLayout", {
		Padding = UDim.new(0, Config.TabPadding),
		FillDirection = Enum.FillDirection.Horizontal,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = TabArea,
	})

	local TabContainer = Library:Create("Frame", {
		BackgroundColor3 = Library.MainColor,
		BorderColor3 = Library.OutlineColor,
		Position = UDim2.new(0, 8, 0, 30),
		Size = UDim2.new(1, -16, 1, -38),
		ZIndex = 2,
		Parent = MainSectionInner,
	})

	Library:AddToRegistry(TabContainer, {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "OutlineColor",
	})

	function Window:SetWindowTitle(Title)
		WindowLabel.Text = Title
	end

	function Window:AddTab(Name)
		local Tab = {
			Groupboxes = {},
			Tabboxes = {},
		}

		local TabButtonWidth = Library:GetTextBounds(Name, Library.Font, 16)

		local TabButton = Library:Create("Frame", {
			BackgroundColor3 = Library.BackgroundColor,
			BorderColor3 = Library.OutlineColor,
			Size = UDim2.new(0, TabButtonWidth + 8 + 4, 1, 0),
			ZIndex = 1,
			Parent = TabArea,
		})

		Library:AddToRegistry(TabButton, {
			BackgroundColor3 = "BackgroundColor",
			BorderColor3 = "OutlineColor",
		})

		local TabButtonLabel = Library:CreateLabel({
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 1, -1),
			Text = Name,
			ZIndex = 1,
			Parent = TabButton,
		})

		local Blocker = Library:Create("Frame", {
			BackgroundColor3 = Library.MainColor,
			BorderSizePixel = 0,
			Position = UDim2.new(0, 0, 1, 0),
			Size = UDim2.new(1, 0, 0, 1),
			BackgroundTransparency = 1,
			ZIndex = 3,
			Parent = TabButton,
		})

		Library:AddToRegistry(Blocker, {
			BackgroundColor3 = "MainColor",
		})

		local TabFrame = Library:Create("Frame", {
			Name = "TabFrame",
			BackgroundTransparency = 1,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			Visible = false,
			ZIndex = 2,
			Parent = TabContainer,
		})

		local LeftSide = Library:Create("ScrollingFrame", {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Position = UDim2.new(0, 8 - 1, 0, 8 - 1),
			Size = UDim2.new(0.5, -12 + 2, 0, 507 + 2),
			CanvasSize = UDim2.new(0, 0, 0, 0),
			BottomImage = "",
			TopImage = "",
			ScrollBarThickness = 0,
			ZIndex = 2,
			Parent = TabFrame,
		})

		local RightSide = Library:Create("ScrollingFrame", {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Position = UDim2.new(0.5, 4 + 1, 0, 8 - 1),
			Size = UDim2.new(0.5, -12 + 2, 0, 507 + 2),
			CanvasSize = UDim2.new(0, 0, 0, 0),
			BottomImage = "",
			TopImage = "",
			ScrollBarThickness = 0,
			ZIndex = 2,
			Parent = TabFrame,
		})

		Library:Create("UIListLayout", {
			Padding = UDim.new(0, 8),
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			Parent = LeftSide,
		})

		Library:Create("UIListLayout", {
			Padding = UDim.new(0, 8),
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			Parent = RightSide,
		})

		for _, Side in next, { LeftSide, RightSide } do
			Side:WaitForChild("UIListLayout"):GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
				Side.CanvasSize = UDim2.fromOffset(0, Side.UIListLayout.AbsoluteContentSize.Y)
			end)
		end

		function Tab:ShowTab()
			for _, Tab in next, Window.Tabs do
				Tab:HideTab()
			end

			Blocker.BackgroundTransparency = 0
			TabButton.BackgroundColor3 = Library.MainColor
			Library.RegistryMap[TabButton].Properties.BackgroundColor3 = "MainColor"
			TabFrame.Visible = true
		end

		function Tab:HideTab()
			Blocker.BackgroundTransparency = 1
			TabButton.BackgroundColor3 = Library.BackgroundColor
			Library.RegistryMap[TabButton].Properties.BackgroundColor3 = "BackgroundColor"
			TabFrame.Visible = false
		end

		function Tab:SetLayoutOrder(Position)
			TabButton.LayoutOrder = Position
			TabListLayout:ApplyLayout()
		end

		function Tab:AddGroupbox(Info)
			local Groupbox = {}

			local BoxOuter = Library:Create("Frame", {
				BackgroundColor3 = Library.BackgroundColor,
				BorderColor3 = Library.OutlineColor,
				BorderMode = Enum.BorderMode.Inset,
				Size = UDim2.new(1, 0, 0, 507 + 2),
				ZIndex = 2,
				Parent = Info.Side == 1 and LeftSide or RightSide,
			})

			Library:AddToRegistry(BoxOuter, {
				BackgroundColor3 = "BackgroundColor",
				BorderColor3 = "OutlineColor",
			})

			local BoxInner = Library:Create("Frame", {
				BackgroundColor3 = Library.BackgroundColor,
				BorderColor3 = Color3.new(0, 0, 0),
				
				Size = UDim2.new(1, -2, 1, -2),
				Position = UDim2.new(0, 1, 0, 1),
				ZIndex = 4,
				Parent = BoxOuter,
			})

			Library:AddToRegistry(BoxInner, {
				BackgroundColor3 = "BackgroundColor",
			})

			local Highlight = Library:Create("Frame", {
				BackgroundColor3 = Library.AccentColor,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 2),
				ZIndex = 5,
				Parent = BoxInner,
			})

			Library:AddToRegistry(Highlight, {
				BackgroundColor3 = "AccentColor",
			})

			local GroupboxLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 18),
				Position = UDim2.new(0, 4, 0, 2),
				TextSize = 14,
				Text = Info.Name,
				TextXAlignment = Enum.TextXAlignment.Left,
				ZIndex = 5,
				Parent = BoxInner,
			})

			local Container = Library:Create("Frame", {
				BackgroundTransparency = 1,
				Position = UDim2.new(0, 4, 0, 20),
				Size = UDim2.new(1, -4, 1, -20),
				ZIndex = 1,
				Parent = BoxInner,
			})

			Library:Create("UIListLayout", {
				FillDirection = Enum.FillDirection.Vertical,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = Container,
			})

			function Groupbox:Resize()
				local Size = 0

				for _, Element in next, Groupbox.Container:GetChildren() do
					if (not Element:IsA("UIListLayout")) and Element.Visible then
						Size = Size + Element.Size.Y.Offset
					end
				end

				BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2 + 2)
			end

			Groupbox.Container = Container
			setmetatable(Groupbox, BaseGroupbox)

			Groupbox:AddBlank(3)
			Groupbox:Resize()

			Tab.Groupboxes[Info.Name] = Groupbox

			return Groupbox
		end

		function Tab:AddLeftGroupbox(Name)
			return Tab:AddGroupbox({ Side = 1, Name = Name })
		end

		function Tab:AddRightGroupbox(Name)
			return Tab:AddGroupbox({ Side = 2, Name = Name })
		end

		function Tab:AddTabbox(Info)
			local Tabbox = {
				Tabs = {},
			}

			local BoxOuter = Library:Create("Frame", {
				BackgroundColor3 = Library.BackgroundColor,
				BorderColor3 = Library.OutlineColor,
				BorderMode = Enum.BorderMode.Inset,
				Size = UDim2.new(1, 0, 0, 0),
				ZIndex = 2,
				Parent = Info.Side == 1 and LeftSide or RightSide,
			})

			Library:AddToRegistry(BoxOuter, {
				BackgroundColor3 = "BackgroundColor",
				BorderColor3 = "OutlineColor",
			})

			local BoxInner = Library:Create("Frame", {
				BackgroundColor3 = Library.BackgroundColor,
				BorderColor3 = Color3.new(0, 0, 0),
				
				Size = UDim2.new(1, -2, 1, -2),
				Position = UDim2.new(0, 1, 0, 1),
				ZIndex = 4,
				Parent = BoxOuter,
			})

			Library:AddToRegistry(BoxInner, {
				BackgroundColor3 = "BackgroundColor",
			})

			local Highlight = Library:Create("Frame", {
				BackgroundColor3 = Library.AccentColor,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 2),
				ZIndex = 10,
				Parent = BoxInner,
			})

			Library:AddToRegistry(Highlight, {
				BackgroundColor3 = "AccentColor",
			})

			local TabboxButtons = Library:Create("Frame", {
				BackgroundTransparency = 1,
				Position = UDim2.new(0, 0, 0, 1),
				Size = UDim2.new(1, 0, 0, 18),
				ZIndex = 5,
				Parent = BoxInner,
			})

			Library:Create("UIListLayout", {
				FillDirection = Enum.FillDirection.Horizontal,
				HorizontalAlignment = Enum.HorizontalAlignment.Left,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = TabboxButtons,
			})

			function Tabbox:AddTab(Name)
				local Tab = {}

				local Button = Library:Create("Frame", {
					BackgroundColor3 = Library.MainColor,
					BorderColor3 = Color3.new(0, 0, 0),
					Size = UDim2.new(0.5, 0, 1, 0),
					ZIndex = 6,
					Parent = TabboxButtons,
				})

				Library:AddToRegistry(Button, {
					BackgroundColor3 = "MainColor",
				})

				local ButtonLabel = Library:CreateLabel({
					Size = UDim2.new(1, 0, 1, 0),
					TextSize = 14,
					Text = Name,
					TextXAlignment = Enum.TextXAlignment.Center,
					ZIndex = 7,
					Parent = Button,
				})

				local Block = Library:Create("Frame", {
					BackgroundColor3 = Library.BackgroundColor,
					BorderSizePixel = 0,
					Position = UDim2.new(0, 0, 1, 0),
					Size = UDim2.new(1, 0, 0, 1),
					Visible = false,
					ZIndex = 9,
					Parent = Button,
				})

				Library:AddToRegistry(Block, {
					BackgroundColor3 = "BackgroundColor",
				})

				local Container = Library:Create("Frame", {
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 4, 0, 20),
					Size = UDim2.new(1, -4, 1, -20),
					ZIndex = 1,
					Visible = false,
					Parent = BoxInner,
				})

				Library:Create("UIListLayout", {
					FillDirection = Enum.FillDirection.Vertical,
					SortOrder = Enum.SortOrder.LayoutOrder,
					Parent = Container,
				})

				function Tab:Show()
					for _, Tab in next, Tabbox.Tabs do
						Tab:Hide()
					end

					Container.Visible = true
					Block.Visible = true

					Button.BackgroundColor3 = Library.BackgroundColor
					Library.RegistryMap[Button].Properties.BackgroundColor3 = "BackgroundColor"

					Tab:Resize()
				end

				function Tab:Hide()
					Container.Visible = false
					Block.Visible = false

					Button.BackgroundColor3 = Library.MainColor
					Library.RegistryMap[Button].Properties.BackgroundColor3 = "MainColor"
				end

				function Tab:Resize()
					local TabCount = 0

					for _, Tab in next, Tabbox.Tabs do
						TabCount = TabCount + 1
					end

					for _, Button in next, TabboxButtons:GetChildren() do
						if not Button:IsA("UIListLayout") then
							Button.Size = UDim2.new(1 / TabCount, 0, 1, 0)
						end
					end

					if not Container.Visible then
						return
					end

					local Size = 0

					for _, Element in next, Tab.Container:GetChildren() do
						if (not Element:IsA("UIListLayout")) and Element.Visible then
							Size = Size + Element.Size.Y.Offset
						end
					end

					BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2 + 2)
				end

				Button.InputBegan:Connect(function(Input)
					if
						Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame()
					then
						Tab:Show()
						Tab:Resize()
					end
				end)

				Tab.Container = Container
				Tabbox.Tabs[Name] = Tab

				setmetatable(Tab, BaseGroupbox)

				Tab:AddBlank(3)
				Tab:Resize()

				
				if #TabboxButtons:GetChildren() == 2 then
					Tab:Show()
				end

				return Tab
			end

			Tab.Tabboxes[Info.Name or ""] = Tabbox

			return Tabbox
		end

		function Tab:AddLeftTabbox(Name)
			return Tab:AddTabbox({ Name = Name, Side = 1 })
		end

		function Tab:AddRightTabbox(Name)
			return Tab:AddTabbox({ Name = Name, Side = 2 })
		end

		TabButton.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Tab:ShowTab()
			end
		end)

		
		if #TabContainer:GetChildren() == 1 then
			Tab:ShowTab()
		end

		Window.Tabs[Name] = Tab
		return Tab
	end

	local ModalElement = Library:Create("TextButton", {
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 0, 0, 0),
		Visible = true,
		Text = "",
		Modal = false,
		Parent = ScreenGui,
	})

	local TransparencyCache = {}
	local Toggled = false
	local Fading = false

	function Library:Toggle()
		if Fading then
			return
		end

		local FadeTime = Config.MenuFadeTime
		Fading = true
		Toggled = not Toggled
		ModalElement.Modal = Toggled

		if Toggled then
			
			Outer.Visible = true

			task.spawn(function()
				
				local State = InputService.MouseIconEnabled

				local Cursor = Drawing.new("Triangle")
				Cursor.Thickness = 1
				Cursor.Filled = true
				Cursor.Visible = true

				local CursorOutline = Drawing.new("Triangle")
				CursorOutline.Thickness = 1
				CursorOutline.Filled = false
				CursorOutline.Color = Color3.new(0, 0, 0)
				CursorOutline.Visible = true

				while Toggled and ScreenGui.Parent do
					InputService.MouseIconEnabled = false

					local mPos = InputService:GetMouseLocation()

					Cursor.Color = Library.AccentColor

					Cursor.PointA = Vector2.new(mPos.X, mPos.Y)
					Cursor.PointB = Vector2.new(mPos.X + 16, mPos.Y + 6)
					Cursor.PointC = Vector2.new(mPos.X + 6, mPos.Y + 16)

					CursorOutline.PointA = Cursor.PointA
					CursorOutline.PointB = Cursor.PointB
					CursorOutline.PointC = Cursor.PointC

					RenderStepped:Wait()
				end

				InputService.MouseIconEnabled = State

				Cursor:Remove()
				CursorOutline:Remove()
			end)
		end

		for _, Desc in next, Outer:GetDescendants() do
			local Properties = {}

			if Desc:IsA("ImageLabel") then
				table.insert(Properties, "ImageTransparency")
				table.insert(Properties, "BackgroundTransparency")
			elseif Desc:IsA("TextLabel") or Desc:IsA("TextBox") then
				table.insert(Properties, "TextTransparency")
			elseif Desc:IsA("Frame") or Desc:IsA("ScrollingFrame") then
				table.insert(Properties, "BackgroundTransparency")
			elseif Desc:IsA("UIStroke") then
				table.insert(Properties, "Transparency")
			end

			local Cache = TransparencyCache[Desc]

			if not Cache then
				Cache = {}
				TransparencyCache[Desc] = Cache
			end

			for _, Prop in next, Properties do
				if not Cache[Prop] then
					Cache[Prop] = Desc[Prop]
				end

				if Cache[Prop] == 1 then
					continue
				end

				TweenService:Create(
					Desc,
					TweenInfo.new(FadeTime, Enum.EasingStyle.Linear),
					{ [Prop] = Toggled and Cache[Prop] or 1 }
				):Play()
			end
		end

		task.wait(FadeTime)

		Outer.Visible = Toggled

		Fading = false
	end

	Library:GiveSignal(InputService.InputBegan:Connect(function(Input, Processed)
		if type(Library.ToggleKeybind) == "table" and Library.ToggleKeybind.Type == "KeyPicker" then
			if
				Input.UserInputType == Enum.UserInputType.Keyboard
				and Input.KeyCode.Name == Library.ToggleKeybind.Value
			then
				task.spawn(Library.Toggle)
			end
		elseif
			Input.KeyCode == Enum.KeyCode.RightControl or (Input.KeyCode == Enum.KeyCode.RightShift and not Processed)
		then
			task.spawn(Library.Toggle)
		end
	end))

	if Config.AutoShow then
		task.spawn(Library.Toggle)
	end

	Window.Holder = Outer

	return Window
end

local function OnPlayerChange()
	local PlayerList = GetPlayersString()

	for _, Value in next, Options do
		if Value.Type == "Dropdown" and Value.SpecialType == "Player" then
			Value:SetValues(PlayerList)
		end
	end
end

Players.PlayerAdded:Connect(OnPlayerChange)
Players.PlayerRemoving:Connect(OnPlayerChange)

getgenv().Library = Library
return Library

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_ThemeManager_lua"] = function()
print("[LOAD] shared/ThemeManager.lua loaded")




local httpService = game:GetService("HttpService")
local ThemeManager = {}
do
	ThemeManager.Folder = "LinoriaLibSettings"
	

	ThemeManager.Library = nil
	ThemeManager.BuiltInThemes = {
		["Default"] = {
			1,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"1c1c1c","AccentColor":"0055ff","BackgroundColor":"141414","OutlineColor":"323232"}'
			),
		},
		["BBot"] = {
			2,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"1e1e1e","AccentColor":"7e48a3","BackgroundColor":"232323","OutlineColor":"141414"}'
			),
		},
		["Fatality"] = {
			3,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"1e1842","AccentColor":"c50754","BackgroundColor":"191335","OutlineColor":"3c355d"}'
			),
		},
		["Jester"] = {
			4,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"242424","AccentColor":"db4467","BackgroundColor":"1c1c1c","OutlineColor":"373737"}'
			),
		},
		["Mint"] = {
			5,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"242424","AccentColor":"3db488","BackgroundColor":"1c1c1c","OutlineColor":"373737"}'
			),
		},
		["Tokyo Night"] = {
			6,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"191925","AccentColor":"6759b3","BackgroundColor":"16161f","OutlineColor":"323232"}'
			),
		},
		["Ubuntu"] = {
			7,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"3e3e3e","AccentColor":"e2581e","BackgroundColor":"323232","OutlineColor":"191919"}'
			),
		},
		["Quartz"] = {
			8,
			httpService:JSONDecode(
				'{"FontColor":"ffffff","MainColor":"232330","AccentColor":"426e87","BackgroundColor":"1d1b26","OutlineColor":"27232f"}'
			),
		},
	}

	function ThemeManager:ApplyTheme(theme)
		local customThemeData = self:GetCustomTheme(theme)
		local data = customThemeData or self.BuiltInThemes[theme]

		if not data then
			return
		end

		

		local scheme = data[2]
		for idx, col in next, customThemeData or scheme do
			self.Library[idx] = Color3.fromHex(col)

			if Options[idx] then
				Options[idx]:SetValueRGB(Color3.fromHex(col))
			end
		end

		self:ThemeUpdate()
	end

	function ThemeManager:ThemeUpdate()
		
		local options = { "FontColor", "MainColor", "AccentColor", "BackgroundColor", "OutlineColor" }
		for i, field in next, options do
			if Options and Options[field] then
				self.Library[field] = Options[field].Value
			end
		end

		self.Library.AccentColorDark = self.Library:GetDarkerColor(self.Library.AccentColor)
		self.Library:UpdateColorsUsingRegistry()
	end

	function ThemeManager:LoadDefault()
		local theme = "Default"
		local content = isfile(self.Folder .. "/themes/default.txt") and readfile(self.Folder .. "/themes/default.txt")

		local isDefault = true
		if content then
			if self.BuiltInThemes[content] then
				theme = content
			elseif self:GetCustomTheme(content) then
				theme = content
				isDefault = false
			end
		elseif self.BuiltInThemes[self.DefaultTheme] then
			theme = self.DefaultTheme
		end

		if isDefault then
			Options.ThemeManager_ThemeList:SetValue(theme)
		else
			self:ApplyTheme(theme)
		end
	end

	function ThemeManager:SaveDefault(theme)
		writefile(self.Folder .. "/themes/default.txt", theme)
	end

	function ThemeManager:CreateThemeManager(groupbox)
		groupbox
			:AddLabel("Background color")
			:AddColorPicker("BackgroundColor", { Default = self.Library.BackgroundColor })
		groupbox:AddLabel("Main color"):AddColorPicker("MainColor", { Default = self.Library.MainColor })
		groupbox:AddLabel("Accent color"):AddColorPicker("AccentColor", { Default = self.Library.AccentColor })
		groupbox:AddLabel("Outline color"):AddColorPicker("OutlineColor", { Default = self.Library.OutlineColor })
		groupbox:AddLabel("Font color"):AddColorPicker("FontColor", { Default = self.Library.FontColor })

		local ThemesArray = {}
		for Name, Theme in next, self.BuiltInThemes do
			table.insert(ThemesArray, Name)
		end

		table.sort(ThemesArray, function(a, b)
			return self.BuiltInThemes[a][1] < self.BuiltInThemes[b][1]
		end)

		groupbox:AddDivider()
		groupbox:AddDropdown("ThemeManager_ThemeList", { Text = "Theme list", Values = ThemesArray, Default = 1 })

		groupbox:AddButton("Set as default", function()
			self:SaveDefault(Options.ThemeManager_ThemeList.Value)
			self.Library:Notify(string.format("Set default theme to %q", Options.ThemeManager_ThemeList.Value))
		end)

		Options.ThemeManager_ThemeList:OnChanged(function()
			self:ApplyTheme(Options.ThemeManager_ThemeList.Value)
		end)

		groupbox:AddDivider()
		groupbox:AddInput("ThemeManager_CustomThemeName", { Text = "Custom theme name" })
		groupbox:AddDropdown(
			"ThemeManager_CustomThemeList",
			{ Text = "Custom themes", Values = self:ReloadCustomThemes(), AllowNull = true, Default = 1 }
		)
		groupbox:AddDivider()

		groupbox
			:AddButton("Save theme", function()
				self:SaveCustomTheme(Options.ThemeManager_CustomThemeName.Value)

				Options.ThemeManager_CustomThemeList:SetValues(self:ReloadCustomThemes())
				Options.ThemeManager_CustomThemeList:SetValue(nil)
			end)
			:AddButton("Load theme", function()
				self:ApplyTheme(Options.ThemeManager_CustomThemeList.Value)
			end)

		groupbox:AddButton("Refresh list", function()
			Options.ThemeManager_CustomThemeList:SetValues(self:ReloadCustomThemes())
			Options.ThemeManager_CustomThemeList:SetValue(nil)
		end)

		groupbox:AddButton("Set as default", function()
			if
				Options.ThemeManager_CustomThemeList.Value ~= nil
				and Options.ThemeManager_CustomThemeList.Value ~= ""
			then
				self:SaveDefault(Options.ThemeManager_CustomThemeList.Value)
				self.Library:Notify(
					string.format("Set default theme to %q", Options.ThemeManager_CustomThemeList.Value)
				)
			end
		end)

		ThemeManager:LoadDefault()

		local function UpdateTheme()
			self:ThemeUpdate()
		end

		Options.BackgroundColor:OnChanged(UpdateTheme)
		Options.MainColor:OnChanged(UpdateTheme)
		Options.AccentColor:OnChanged(UpdateTheme)
		Options.OutlineColor:OnChanged(UpdateTheme)
		Options.FontColor:OnChanged(UpdateTheme)
	end

	function ThemeManager:GetCustomTheme(file)
		local path = self.Folder .. "/themes/" .. file
		if not isfile(path) then
			return nil
		end

		local data = readfile(path)
		local success, decoded = pcall(httpService.JSONDecode, httpService, data)

		if not success then
			return nil
		end

		return decoded
	end

	function ThemeManager:SaveCustomTheme(file)
		if file:gsub(" ", "") == "" then
			return self.Library:Notify("Invalid file name for theme (empty)", 3)
		end

		local theme = {}
		local fields = { "FontColor", "MainColor", "AccentColor", "BackgroundColor", "OutlineColor" }

		for _, field in next, fields do
			theme[field] = Options[field].Value:ToHex()
		end

		writefile(self.Folder .. "/themes/" .. file .. ".json", httpService:JSONEncode(theme))
	end

	function ThemeManager:ReloadCustomThemes()
		local list = listfiles(self.Folder .. "/themes")

		local out = {}
		for i = 1, #list do
			local file = list[i]
			if file:sub(-5) == ".json" then
				

				local pos = file:find(".json", 1, true)
				local char = file:sub(pos, pos)

				while char ~= "/" and char ~= "\\" and char ~= "" do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == "/" or char == "\\" then
					table.insert(out, file:sub(pos + 1))
				end
			end
		end

		return out
	end

	function ThemeManager:SetLibrary(lib)
		self.Library = lib
	end

	function ThemeManager:BuildFolderTree()
		local paths = {}

		
		

		local parts = self.Folder:split("/")
		for idx = 1, #parts do
			paths[#paths + 1] = table.concat(parts, "/", 1, idx)
		end

		table.insert(paths, self.Folder .. "/themes")
		table.insert(paths, self.Folder .. "/settings")

		for i = 1, #paths do
			local str = paths[i]
			if not isfolder(str) then
				makefolder(str)
			end
		end
	end

	function ThemeManager:SetFolder(folder)
		self.Folder = folder
		self:BuildFolderTree()
	end

	function ThemeManager:CreateGroupBox(tab)
		assert(self.Library, "Must set ThemeManager.Library first!")
		return tab:AddLeftGroupbox("Themes")
	end

	function ThemeManager:ApplyToTab(tab)
		assert(self.Library, "Must set ThemeManager.Library first!")
		local groupbox = self:CreateGroupBox(tab)
		self:CreateThemeManager(groupbox)
	end

	function ThemeManager:ApplyToGroupbox(groupbox)
		assert(self.Library, "Must set ThemeManager.Library first!")
		self:CreateThemeManager(groupbox)
	end

	ThemeManager:BuildFolderTree()
end

return ThemeManager

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_SaveManager_lua"] = function()
print("[LOAD] shared/SaveManager.lua loaded")




local httpService = game:GetService("HttpService")

local SaveManager = {}
do
	SaveManager.Folder = "LinoriaLibSettings"
	SaveManager.Ignore = {}
	SaveManager.Parser = {
		Toggle = {
			Save = function(idx, object)
				return { type = "Toggle", idx = idx, value = object.Value }
			end,
			Load = function(idx, data)
				if Toggles[idx] then
					Toggles[idx]:SetValue(data.value)
				end
			end,
		},
		Slider = {
			Save = function(idx, object)
				return { type = "Slider", idx = idx, value = tostring(object.Value) }
			end,
			Load = function(idx, data)
				if Options[idx] then
					Options[idx]:SetValue(data.value)
				end
			end,
		},
		Dropdown = {
			Save = function(idx, object)
				return { type = "Dropdown", idx = idx, value = object.Value, mutli = object.Multi }
			end,
			Load = function(idx, data)
				if Options[idx] then
					Options[idx]:SetValue(data.value)
				end
			end,
		},
		ColorPicker = {
			Save = function(idx, object)
				return {
					type = "ColorPicker",
					idx = idx,
					value = object.Value:ToHex(),
					transparency = object.Transparency,
				}
			end,
			Load = function(idx, data)
				if Options[idx] then
					Options[idx]:SetValueRGB(Color3.fromHex(data.value), data.transparency)
				end
			end,
		},
		KeyPicker = {
			Save = function(idx, object)
				return { type = "KeyPicker", idx = idx, mode = object.Mode, key = object.Value }
			end,
			Load = function(idx, data)
				if Options[idx] then
					Options[idx]:SetValue({ data.key, data.mode })
				end
			end,
		},

		Input = {
			Save = function(idx, object)
				return { type = "Input", idx = idx, text = object.Value }
			end,
			Load = function(idx, data)
				if Options[idx] and type(data.text) == "string" then
					Options[idx]:SetValue(data.text)
				end
			end,
		},
	}

	function SaveManager:SetIgnoreIndexes(list)
		for _, key in next, list do
			self.Ignore[key] = true
		end
	end

	function SaveManager:SetFolder(folder)
		self.Folder = folder
		self:BuildFolderTree()
	end

	function SaveManager:Save(name)
		if not name then
			return false, "no config file is selected"
		end

		local fullPath = self.Folder .. "/settings/" .. name .. ".json"

		local data = {
			objects = {},
		}

		for idx, toggle in next, Toggles do
			if self.Ignore[idx] then
				continue
			end

			table.insert(data.objects, self.Parser[toggle.Type].Save(idx, toggle))
		end

		for idx, option in next, Options do
			if not self.Parser[option.Type] then
				continue
			end
			if self.Ignore[idx] then
				continue
			end

			table.insert(data.objects, self.Parser[option.Type].Save(idx, option))
		end

		local success, encoded = pcall(httpService.JSONEncode, httpService, data)
		if not success then
			return false, "failed to encode data"
		end

		writefile(fullPath, encoded)
		return true
	end

	function SaveManager:Load(name)
		if not name then
			return false, "no config file is selected"
		end

		local file = self.Folder .. "/settings/" .. name .. ".json"
		if not isfile(file) then
			return false, "invalid file"
		end

		local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
		if not success then
			return false, "decode error"
		end

		for _, option in next, decoded.objects do
			if self.Parser[option.type] then
				task.spawn(function()
					self.Parser[option.type].Load(option.idx, option)
				end) 
			end
		end

		return true
	end

	function SaveManager:IgnoreThemeSettings()
		self:SetIgnoreIndexes({
			"BackgroundColor",
			"MainColor",
			"AccentColor",
			"OutlineColor",
			"FontColor", 
			"ThemeManager_ThemeList",
			"ThemeManager_CustomThemeList",
			"ThemeManager_CustomThemeName", 
		})
	end

	function SaveManager:BuildFolderTree()
		local paths = {
			self.Folder,
			self.Folder .. "/themes",
			self.Folder .. "/settings",
		}

		for i = 1, #paths do
			local str = paths[i]
			if not isfolder(str) then
				makefolder(str)
			end
		end
	end

	function SaveManager:RefreshConfigList()
		local list = listfiles(self.Folder .. "/settings")

		local out = {}
		for i = 1, #list do
			local file = list[i]
			if file:sub(-5) == ".json" then
				

				local pos = file:find(".json", 1, true)
				local start = pos

				local char = file:sub(pos, pos)
				while char ~= "/" and char ~= "\\" and char ~= "" do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == "/" or char == "\\" then
					table.insert(out, file:sub(pos + 1, start - 1))
				end
			end
		end

		return out
	end

	function SaveManager:SetLibrary(library)
		self.Library = library
	end

	function SaveManager:LoadAutoloadConfig()
		if isfile(self.Folder .. "/settings/autoload.txt") then
			local name = readfile(self.Folder .. "/settings/autoload.txt")

			local success, err = self:Load(name)
			if not success then
				return self.Library:Notify("Failed to load autoload config: " .. err)
			end

			self.Library:Notify(string.format("Auto loaded config %q", name))
		end
	end

	function SaveManager:BuildConfigSection(tab)
		assert(self.Library, "Must set SaveManager.Library")

		local section = tab:AddRightGroupbox("Configuration")

		section:AddInput("SaveManager_ConfigName", { Text = "Config name" })
		section:AddDropdown(
			"SaveManager_ConfigList",
			{ Text = "Config list", Values = self:RefreshConfigList(), AllowNull = true }
		)

		section:AddDivider()

		section
			:AddButton("Create config", function()
				local name = Options.SaveManager_ConfigName.Value

				if name:gsub(" ", "") == "" then
					return self.Library:Notify("Invalid config name (empty)", 2)
				end

				local success, err = self:Save(name)
				if not success then
					return self.Library:Notify("Failed to save config: " .. err)
				end

				self.Library:Notify(string.format("Created config %q", name))

				Options.SaveManager_ConfigList:SetValues(self:RefreshConfigList())
				Options.SaveManager_ConfigList:SetValue(nil)
			end)
			:AddButton("Load config", function()
				local name = Options.SaveManager_ConfigList.Value

				local success, err = self:Load(name)
				if not success then
					return self.Library:Notify("Failed to load config: " .. err)
				end

				self.Library:Notify(string.format("Loaded config %q", name))
			end)

		section:AddButton("Overwrite config", function()
			local name = Options.SaveManager_ConfigList.Value

			local success, err = self:Save(name)
			if not success then
				return self.Library:Notify("Failed to overwrite config: " .. err)
			end

			self.Library:Notify(string.format("Overwrote config %q", name))
		end)

		section:AddButton("Refresh list", function()
			Options.SaveManager_ConfigList:SetValues(self:RefreshConfigList())
			Options.SaveManager_ConfigList:SetValue(nil)
		end)

		section:AddButton("Set as autoload", function()
			local name = Options.SaveManager_ConfigList.Value
			writefile(self.Folder .. "/settings/autoload.txt", name)
			SaveManager.AutoloadLabel:SetText("Current autoload config: " .. name)
			self.Library:Notify(string.format("Set %q to auto load", name))
		end)

		SaveManager.AutoloadLabel = section:AddLabel("Current autoload config: none", true)

		if isfile(self.Folder .. "/settings/autoload.txt") then
			local name = readfile(self.Folder .. "/settings/autoload.txt")
			SaveManager.AutoloadLabel:SetText("Current autoload config: " .. name)
		end

		SaveManager:SetIgnoreIndexes({ "SaveManager_ConfigList", "SaveManager_ConfigName" })
	end

	SaveManager:BuildFolderTree()
end

return SaveManager

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_WorldChecks_lua"] = function()
print("[LOAD] src/modules/WorldChecks.lua loaded")



local WorldChecks = {}

function WorldChecks:ClickonSigilHelmSword()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Camera = workspace.CurrentCamera
    local itemName = "Kyley's Promise"
    local character = LocalPlayer.Character
    if not character then return false end
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return false end
    local item = backpack:FindFirstChild(itemName)
    if item then
        item.Parent = character
        task.wait(0.2)
    end
    
    local ryude = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Ryude")
    if not ryude then return false end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if rootPart and ryude and Camera then
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, ryude.Position)
        task.wait(0.1)
    end
    
    local clickDetector = ryude:FindFirstChildWhichIsA("ClickDetector", true)
    if clickDetector then
        fireclickdetector(clickDetector)
        return true
    end
    return false
end

function WorldChecks:TrinketWait()
	local startTime = tick()
	local timeout = 9
	local initialParts = {}
	for _, part in pairs(workspace:GetDescendants()) do
		if part:IsA("BasePart") then
			initialParts[part] = true
		end
	end

	while tick() - startTime < timeout do
		for _, part in pairs(workspace:GetDescendants()) do
			if part:IsA("BasePart") and not initialParts[part] then
				return true
			end
		end
		task.wait(0.1)
	end

	return false
end

return WorldChecks

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getmoney_lua"] = function()
print("[LOAD] paths/modules/getmoney.lua loaded")


local WorldChecks = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_WorldChecks_lua")
local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")
local ServerHop = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_ServerHop_lua")
local Path = {
	{
		position = Vector3.new(88.09, 382.45, -556.72),
		delay = 5,
	},
	{
		position = Vector3.new(86.90, 307.16, -537.48),
		delay = 5,
	},
	{
		position = Vector3.new(87.26, 147.29, -510.07),
		delay = 2,
	},
	{
		position = Vector3.new(257.31, 147.24, -782.57),
		delay = 2,
	},
	{
		position = Vector3.new(249.07, 318.85, -921.32),
		delay = 2,
	},
	{
		position = Vector3.new(250.48, 340.45, -1137.58),
		delay = 2,
	},
	{
		position = Vector3.new(554.14, 354.45, -1182.34),
		delay = 2,
		actions = {
			function()
				WorldChecks:TrinketWait()
			end,
		},
	},
	{
		position = Vector3.new(554.00, 178.60, -1182.34),
		delay = 5,
	},
	{
		position = Vector3.new(554.00, 354.45, -1182.34),
		delay = 5,
	},
	{
		position = Vector3.new(110.06, 382.45, -1166.56),
		delay = 2,
	},
	{
		position = Vector3.new(29.10, 483.45, -1168.87),
		delay = 1,
	},
	{
		position = Vector3.new(-46.57, 483.45, -677.33),
		delay = 1,
	},
	{
		position = Vector3.new(-192.86, 376.45, -296.28),
		delay = 2,
	},
	{
		position = Vector3.new(-453.64, 230.69, 54.31),
		delay = 6,
		actions = {
			function()
				NpcInteraction:sellAllTrinkets()
			end,
		},
	},
	{
		position = Vector3.new(-200.02, 376.45, -296.44),
		delay = 2,
	},
	{
		position = Vector3.new(88.18, 382.45, -557.02),
		delay = 2,
		actions = {
			function()
				ServerHop:hop()
			end,
		},
	},
}

return Path or {}
end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerValueCheck_lua"] = function()
print("[LOAD] src/modules/PlayerValueCheck.lua loaded")




local PlayerValueCheck = {}
local player = game.Players.LocalPlayer
PlayerValueCheck.hasSurvived = false

local DaysSurvivedChanged = game.ReplicatedStorage:WaitForChild("DaysSurvivedChanged")
DaysSurvivedChanged.OnClientEvent:Connect(function()
	PlayerValueCheck.hasSurvived = true
	task.wait(30)
	PlayerValueCheck.hasSurvived = false
end)

function PlayerValueCheck:CheckItems(itemName, requiredCount)
	local player = game.Players.LocalPlayer
	local inventory = player:WaitForChild("Backpack")
	local count = 0
	for _, item in pairs(inventory:GetChildren()) do
		if item.Name == itemName then
			count = count + 1
			if count >= requiredCount then
				print("Player has " .. requiredCount .. " or more " .. itemName .. "(s).")
				return true
			end
		end
	end
	print("Player does not have enough " .. itemName .. "(s). Total found: " .. count)
	return false
end

return PlayerValueCheck

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_waitforday_lua"] = function()
print("[LOAD] paths/modules/waitforday.lua loaded")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "waitforday" then
	return
end

local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
local PlayerValueCheck = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerValueCheck_lua")

local Path = {
	HalfWayThere = {
		position = Vector3.new(3274.5, 419.068, -2507.6),
		delay = 2,
	},
	dayfarmSpot = {
		position = Vector3.new(3279.287, 370.457, -2925.523),
		delay = 0,
	},
}

Movement:InnTeleport(Inns.Flowerlight)
Movement:tweenToPoint(Path.HalfWayThere.position)
Movement:tweenToPoint(Path.dayfarmSpot.position)

while PlayerValueCheck.hasSurvived == false do
	task.wait(1)
end

if PlayerValueCheck.hasSurvived == true then
	Path.Completed = true
end

return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_quests_lua"] = function()
print("[LOAD] paths/modules/quests.lua loaded")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "quests" then
	return
end

local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")

local Path = {
	Turnip = {
		position = Vector3.new(3078.9, 124.745, -2551.3),
		delay = 6,
	},
	mossplant2 = {
		position = Vector3.new(2264, 56.5, 532),
		delay = 6,
	},
}

Movement:InnTeleport(Inns.Flowerlight)
Movement:tweenToPoint(Path.Turnip.position)
GetKey("PostDialogue"):FireServer({ choice = "Sure" })
task.wait(0.2)
GetKey("PostDialogue"):FireServer({ exit = true })
task.wait(6)
Movement:tweenToPoint(Path.mossplant2.position)
Movement:InnTeleport(Inns.Southern)
Path.Completed = true

return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_maketespians_lua"] = function()
print("[LOAD] paths/modules/maketespians.lua loaded")

local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "maketespians" then
	return
end


local function getMovement()
	return __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
end

local function getPlayerValueCheck()
	return __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerValueCheck_lua")
end

local function getInns()
	return __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
end

local Path = {
	mossplant1 = {
		position = Vector3.new(2253.729, 60, 530.165),
		delay = 7,
	},
	mossplant2 = {
		position = Vector3.new(2273.858, 60, 535.562),
		delay = 6,
	},
	mossplant3 = {
		position = Vector3.new(2402.091, 59, 485.828),
		delay = 6,
	},
	mossplant4 = {
		position = Vector3.new(2399.943, 59, 470.465),
		delay = 6,
	},
	mossplant5 = {
		position = Vector3.new(2264, 56.5, 532),
		delay = 6,
	},
	mossplant6 = {
		position = Vector3.new(2264, 56.5, 532),
		delay = 6,
	},
}

local botRef = nil
function Path.setBot(bot)
	botRef = bot
end

local Movement = getMovement()
local Inns = getInns()

Movement:InnTeleport(Inns.Alana, "Inn Keeper")
task.wait(0.2)
Movement:tweenToPoint(Path.mossplant1.position)
Movement:tweenToPoint(Path.mossplant2.position)

local PlayerValueCheck = getPlayerValueCheck()
if not PlayerValueCheck:CheckItems("Moss Plant", 10) then
	if botRef then
		botRef:start("waitforday")
		botRef:waitForPathCompletion()
	else
		warn("Bot module not set in maketespians; cannot invoke waitforday behavior.")
	end
end

Movement:InnTeleport(Inns.Southern)
Path.Completed = true
return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getsigil_lua"] = function()
print("[LOAD] paths/modules/getsigil.lua loaded")


local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")

local Path = {
	{
		position = Vector3.new(6181.24, 1344.29, 169.47),
		delay = 20,
		actions = {
			function()
				Movement:InnTeleport(Inns.Tundra5)
			end,
			function()
				NpcInteraction:interactWithNPC
			end,
		},
	},
	{
		position = Vector3.new(6187.96, 1392.46, 120.71),
		delay = 1
	},
	{
		position = Vector3.new(6335.81, 1418.29, 74.37),
		delay = 1
	},
	{
		position = Vector3.new(6335.97, 1478.49, -4.75),
		delay = 1
	},
	{
		position = Vector3.new(6317.19, 1478.29, -179.67),
		delay = 1
	},
	{
		position = Vector3.new(6285.69, 1334.29, -183.34),
		delay = 1
	},
	{
		position = Vector3.new(6278.32, 1334.29, -381.46),
		delay = 1
	},
	{
		position = Vector3.new(6278.16, 1466.29, -396.07),
		delay = 1
	},
	{
		position = Vector3.new(6243.37, 1466.29, -526.09),
		delay = 1
	},
	{
		position = Vector3.new(5910.09, 1459.29, -579.74),
		delay = 1,
	},
	{
		position = Vector3.new(5852.44, 1299.29, -532.20),
		delay = 3,
		actions = {
			function()
				WorldChecks:ClickonSigilHelmSword()
			end,
		}
	},
	{
		position = Vector3.new(5853.17, 1459.29, -574.82),
		delay = 1,
	},
	{
		position = Vector3.new(5999.25, 1497.29, -576.33),
		delay = 1,
	},
	{
		position = Vector3.new(6231.53, 1514.29, -526.67),
		delay = 1,
	},
	{
		position = Vector3.new(6275.15, 1466.29, -389.80),
		delay = 1,
	},
	{
		position = Vector3.new(6277.01, 1334.29, -380.32),
		delay = 1,
	},
	{
		position = Vector3.new(6284.99, 1334.29, -189.43),
		delay = 1,
	},
	{
		position = Vector3.new(6319.32, 1478.29, -174.80),
		delay = 1,
	},
	{
		position = Vector3.new(6335.02, 1478.49, 34.44),
		delay = 1,
	},
	{
		position = Vector3.new(6334.51, 1418.29, 76.77),
	},
	{
		position = Vector3.new(6184.30, 1392.49, 124.74),
	},
	{
		position = Vector3.new(6182.05, 1344.29, 168.35),
		delay = 20,
		actions = {
			function()
				NpcInteraction:interactWithNPC
			end,
		},
	},
}

return Path
end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getexp_lua"] = function()
print("[LOAD] paths/modules/getexp.lua loaded")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "getexp" then
	return
end

local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")

local Path = {
	Placeholder = {
		position = Vector3.new(0, 10, 0),
		delay = 2,
	},
}


Path.Completed = true
return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_doNonRepeatQuests_lua"] = function()
print("[LOAD] paths/modules/doNonRepeatQuests.lua loaded")
local function getBot()
	return __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
end

if getBot().currentPath ~= "doNonRepeatQuests" then
	return
end

local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")

local Path = {
	Placeholder = {
		position = Vector3.new(0, 10, 0),
		delay = 2,
	},
}


Path.Completed = true
return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_ClassPathModules_SKC_super_lua"] = function()
print("[LOAD] paths/modules/ClassPathModules/SKC/super.lua loaded")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "super" then
	return
end

local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")

local Path = {
	SigilTrainer = {
		position = Vector3.new(1953.037, 307.9, -828.934),
		delay = 2,
	},
}

Movement:InnTeleport(Inns.SigilTree)
Movement:tweenToPoint(Path.SigilTrainer.position)
NpcInteraction:interactWithNPC("Frey")
NpcInteraction:waitForChoice("placeholder")
NpcInteraction:choose("placeholder")
NpcInteraction:waitForChoice("placeholder")
NpcInteraction:choose("placeholder")
NpcInteraction:waitForChoice("placeholder")
NpcInteraction:choose("placeholder")
NpcInteraction:waitForChoice("placeholder")
NpcInteraction:choose("placeholder")

return Path or {}

end;


__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_ClassPathModules_SKC_ultra_lua"] = function()
print("[LOAD] paths/modules/ClassPathModules/SKC/ultra.lua loaded")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
if Bot.currentPath ~= "ultra" then
	return
end

local Config = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Config_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")

local Path = {
	Placeholder = {
		position = Vector3.new(0, 10, 0),
		delay = 2,
	},
}

return Path or {}

end;

__MODULES["__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_Main_lua"] = function()
print("[LOAD] src/Main.lua loaded")
local Stats = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Stats_lua")
local Bot = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Bot_lua")
local Noclip = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Noclip_lua")
local Pickup = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Pickup_lua")
local PlayerCheck = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_PlayerCheck_lua")
local ServerHop = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_ServerHop_lua")
local UILibrary = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_UILibrary_lua")
local ThemeManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_ThemeManager_lua")
local SaveManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_shared_SaveManager_lua")
local _force_bundle_encryption = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_encryption_lua")
local Movement = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Movement_lua")
local Inns = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_Inns_lua")
local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")
local EventManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_EventManager_lua")

local savedPath = Stats:loadPath()


local Library = UILibrary
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

local Window = Library:CreateWindow({
    Title = "AutoProg Main",
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2,
})

local Tabs = {
    Main = Window:AddTab("Main"),
    Features = Window:AddTab("Features"),
    NPCInteractions = Window:AddTab("NPC Interactions"),
    Settings = Window:AddTab("Settings"),
}


local classPaths = {}
local function addPath(display, req)
    classPaths[display] = req
end
addPath("waitforday", "@paths/modules/waitforday")
addPath("quests", "@paths/modules/quests")
addPath("maketespians", "@paths/modules/maketespians")
addPath("getsigil", "@paths/modules/getsigil")
addPath("getmoney", "@paths/modules/getmoney")
addPath("getexp", "@paths/modules/getexp")
addPath("doNonRepeatQuests", "@paths/modules/doNonRepeatQuests")
addPath("SKC_super", "@paths/modules/ClassPathModules/SKC/super")
addPath("SKC_ultra", "@paths/modules/ClassPathModules/SKC/ultra")


local function getClassPathKeys(tbl)
    local keys = {}
    for k, _ in pairs(tbl) do
        table.insert(keys, k)
    end
    table.sort(keys) 
    return keys
end

local function resolvePathAlias(path)
    
    local p = path:gsub("^@paths/", "paths/"):gsub("^@modules/", "src/modules/"):gsub("^@", "")
    if not p:match("%.lua$") then
        p = p .. ".lua"
    end
    if p:sub(1, 2) ~= "./" then
        p = "./" .. p
    end
    return p
end

local function tryRequireAllFormats(basePath)
    local tried = {}
    local candidates = {
        basePath,
        basePath .. ".lua",
        "./" .. basePath,
        "./" .. basePath .. ".lua",
        basePath:gsub("^@paths/", "paths/"),
        basePath:gsub("^@paths/", "paths/") .. ".lua",
        "./" .. basePath:gsub("^@paths/", "paths/"),
        "./" .. basePath:gsub("^@paths/", "paths/") .. ".lua",
    }
    local seen = {}
    for _, p in ipairs(candidates) do
        if not seen[p] then
            seen[p] = true
            local ok, mod = pcall(function() return require(p) end)
            table.insert(tried, p)
            if ok and type(mod) == "table" and next(mod) then
                return true, mod, tried
            end
        end
    end
    return false, nil, tried
end

local AllPaths = {
    getmoney = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getmoney_lua"),
    waitforday = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_waitforday_lua"),
    quests = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_quests_lua"),
    maketespians = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_maketespians_lua"),
    getsigil = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getsigil_lua"),
    getexp = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_getexp_lua"),
    doNonRepeatQuests = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_doNonRepeatQuests_lua"),
    SKC_super = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_ClassPathModules_SKC_super_lua"),
    SKC_ultra = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_paths_modules_ClassPathModules_SKC_ultra_lua"),
}

local MainBox = Tabs.Main:AddLeftGroupbox("Bot Controls")

local selectedClass = nil
MainBox:AddDropdown("ClassPathDropdown", {
    Text = "Select Path to Test",
    Values = getClassPathKeys(classPaths),
    Default = 1,
    Callback = function(className)
        selectedClass = className
    end,
})

MainBox:AddButton({
    Text = "Start Selected Path",
    Func = function()
        if selectedClass and AllPaths[selectedClass] then
            local pathTable = AllPaths[selectedClass]
            if type(pathTable) == "table" and next(pathTable) then
                Bot:start(pathTable)
                Library:Notify("Started path for " .. selectedClass, 3)
            else
                Library:Notify("Failed to load path for " .. (selectedClass or "?"), 3)
            end
        else
            Library:Notify("No path selected!", 3)
        end
    end,
    Tooltip = "Start the bot with the selected path for debugging",
})

MainBox:AddButton({
    Text = "Stop Bot",
    Func = function()
        if Bot.maid and Bot.maid.DoCleaning then
            Bot:stop()
            Library:Notify("Bot stopped!", 3)
        else
            Library:Notify("Bot not running.", 3)
        end
    end,
    Tooltip = "Stop the bot",
})
MainBox:AddButton({
    Text = "Server Hop",
    Func = function()
        ServerHop:hop()
        Library:Notify("Server hopping...", 3)
    end,
    Tooltip = "Hop to another server",
})


local FeaturesBox = Tabs.Features:AddLeftGroupbox("Script Features")
FeaturesBox:AddToggle("NoclipToggle", {
    Text = "Noclip",
    Default = false,
    Tooltip = "Toggle Noclip",
    Callback = function(Value)
        if Value then
            Noclip:enable()
        else
            Noclip:disable()
        end
    end,
})
FeaturesBox:AddToggle("TrinketPickupToggle", {
    Text = "Auto Trinket Pickup",
    Default = false,
    Tooltip = "Toggle auto trinket pickup",
    Callback = function(Value)
        if Value then
            Pickup:enableTrinketPickup()
        else
            Pickup:disableTrinketPickup()
        end
    end,
})
FeaturesBox:AddToggle("IngredientPickupToggle", {
    Text = "Auto Ingredient Pickup",
    Default = false,
    Tooltip = "Toggle auto ingredient pickup",
    Callback = function(Value)
        if Value then
            Pickup:enableIngredientPickup()
        else
            Pickup:disableIngredientPickup()
        end
    end,
})
FeaturesBox:AddButton({
    Text = "Check All Players for Dangerous Tools",
    Func = function()
        local found = PlayerCheck:checkAllPlayersForDangerousTools()
        Library:Notify(found and "Dangerous tool found!" or "No dangerous tools detected.", 3)
    end,
    Tooltip = "Scan all players for dangerous tools",
})


local SettingsBox = Tabs.Settings:AddLeftGroupbox("Settings")
SettingsBox:AddButton({
    Text = "Unload Script",
    Func = function()
        Library:Unload()
    end,
    Tooltip = "Unload the script and UI",
})

local InnBox = Tabs.Main:AddLeftGroupbox("Inn Teleports")
for innName, position in pairs(Inns) do
    InnBox:AddButton({
        Text = "Teleport to " .. innName .. " Inn",
        Func = function()
			print("teleporting to", position, "with name Inn Keeper")
            InnTeleport(position, "Inn Keeper")
            Library:Notify("Teleporting to " .. innName .. " Inn", 3)
        end,
        Tooltip = "Teleport to the " .. innName .. " inn",
    })
end

local NpcBox = Tabs.NPCInteractions:AddLeftGroupbox("NPC Dialogue")

NpcBox:AddInput("NpcChooseInput", {
    Text = "Choice Text",
    Placeholder = "Enter choice...",
    Callback = function(value)
        
    end,
})
NpcBox:AddButton({
    Text = "Choose",
    Func = function()
        local chosen = Options.NpcChooseInput and Options.NpcChooseInput.Value or nil
        if not chosen or #chosen == 0 then
            Library:Notify("Enter a choice first!", 2)
            return
        end
        local remotes = getgenv().remotes or {}
        if remotes["PostDialogue"] then
            local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")
            if NpcInteraction and NpcInteraction.choose then
                NpcInteraction:choose(chosen)
                Library:Notify("Called choose with: " .. chosen, 2)
            else
                Library:Notify("choose function missing!", 2)
            end
        else
            
            local player = game:GetService("Players").LocalPlayer
            local choices = player.PlayerGui:FindFirstChild("DialogueGui", true)
            if choices then
                local frame = choices:FindFirstChild("DialogueFrame", true)
                if frame then
                    local choicesFrame = frame:FindFirstChild("Choices", true)
                    if choicesFrame then
                        local chosenButton = choicesFrame:FindFirstChild(chosen)
                        if chosenButton then
                            local EventManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_EventManager_lua")
                            if EventManager and EventManager.simulateButtonClick then
                                EventManager.simulateButtonClick(chosenButton)
                                Library:Notify("Manually clicked choice: " .. chosen, 2)
                                return
                            else
                                Library:Notify("simulateButtonClick missing!", 2)
                                return
                            end
                        end
                    end
                end
            end
            Library:Notify("Choice button not found!", 2)
        end
    end
})
NpcBox:AddButton({
    Text = "Exit Dialogue",
    Func = function()
        local remotes = getgenv().remotes or {}
        if remotes["PostDialogue"] then
            local NpcInteraction = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_NpcInteraction_lua")
            if NpcInteraction and NpcInteraction.exitDialogue then
                NpcInteraction:exitDialogue()
                Library:Notify("Called exitDialogue", 2)
            else
                Library:Notify("exitDialogue function missing!", 2)
            end
        else
            
            local player = game:GetService("Players").LocalPlayer
            local choices = player.PlayerGui:FindFirstChild("DialogueGui", true)
            if choices then
                local frame = choices:FindFirstChild("DialogueFrame", true)
                if frame then
                    local choicesFrame = frame:FindFirstChild("Choices", true)
                    if choicesFrame then
                        local byeButton = choicesFrame:FindFirstChild("Bye")
                        if byeButton then
                            local EventManager = __require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_modules_EventManager_lua")
                            if EventManager and EventManager.simulateButtonClick then
                                EventManager.simulateButtonClick(byeButton)
                                Library:Notify("Manually clicked Bye button", 2)
                                return
                            else
                                Library:Notify("simulateButtonClick missing!", 2)
                                return
                            end
                        end
                    end
                end
            end
            Library:Notify("Bye button not found!", 2)
        end
    end
})

local remoteNames = {"PostDialogue", "Sprint", "FallDamage", "ChangeArea", "ManaCharge", "Roll", "Climb"}
local function getRemoteStatusText()
    local remotes = getgenv().remotes or {}
    local text = "Remotes:\n"
    for i, name in ipairs(remoteNames) do
        local cached = remotes[name] ~= nil
        local symbol = cached and "🟢" or "🔴"
        text = text .. symbol .. " " .. name .. (cached and " (cached)" or " (not cached)")
        if i < #remoteNames then
            text = text .. "\n"
        end
    end
    return text
end

local remoteStatusLabel = NpcBox:AddLabel(getRemoteStatusText(), true)

spawn(function()
    while true do
        remoteStatusLabel:SetText(getRemoteStatusText())
        wait(1)
    end
end)

ThemeManager:SetFolder("AutoProgThemes")
SaveManager:SetFolder("AutoProgConfigs")
SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

end;

-- Start the application
__require("__m_C__Users_Ludus_Downloads_auto_prog_main__5__auto_prog_main_src_Main_lua");
